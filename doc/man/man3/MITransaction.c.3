.TH "Object/Message/Transaction.c" 3 "Thu Oct 11 2012" "Version 1.0" "Bitcoin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Object/Message/Transaction.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'Transaction.h'\fP
.br
\fC#include '../../Constants.h'\fP
.br
\fC#include <stdint.h>\fP
.br
\fC#include <assert.h>\fP
.br
\fC#include '../../Utils/VariableLengthInteger/VarLenInt.h'\fP
.br
\fC#include '../ByteArray.h'\fP
.br
\fC#include 'TransactionInput.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "\fBTransaction\fP * \fBcreateNewTransaction\fP (uint32_t lockTime, uint32_t version, void(*onErrorReceived)(\fBError\fP error, char *,...))"
.br
.RI "\fICreates a new \fBTransaction\fP object with no inputs or outputs. \fP"
.ti -1c
.RI "\fBTransaction\fP * \fBcreateNewTransactionFromByteArray\fP (\fBByteArray\fP *bytes, void(*onErrorReceived)(\fBError\fP error, char *,...))"
.br
.RI "\fICreates a new \fBTransaction\fP object from byte data. Should be serialised for object data. \fP"
.ti -1c
.RI "int \fBinitializeTransaction\fP (\fBTransaction\fP *self, uint32_t lockTime, uint32_t version, void(*onErrorReceived)(\fBError\fP error, char *,...))"
.br
.RI "\fIInitialises a \fBTransaction\fP object. \fP"
.ti -1c
.RI "int \fBinitializeTransactionFromByteArray\fP (\fBTransaction\fP *self, \fBByteArray\fP *data, void(*onErrorReceived)(\fBError\fP error, char *,...))"
.br
.RI "\fICreates a new \fBTransaction\fP object from byte data. Should be serialised for object data. \fP"
.ti -1c
.RI "void \fBdestroyTransaction\fP (void *transaction)"
.br
.RI "\fIDestructor; destroys a \fBTransaction\fP object. \fP"
.ti -1c
.RI "\fBTransaction\fP * \fBgetTransaction\fP (void *self)"
.br
.RI "\fIGets a \fBTransaction\fP from another object. Use this to avoid casts. \fP"
.ti -1c
.RI "int \fBaddTransactionInput\fP (\fBTransaction\fP *self, \fBTransactionInput\fP *input)"
.br
.RI "\fIAdds an \fBTransactionInput\fP to the \fBTransaction\fP. \fP"
.ti -1c
.RI "int \fBaddTransactionOutput\fP (\fBTransaction\fP *self, \fBTransactionOutput\fP *output)"
.br
.RI "\fIAdds an \fBTransactionInput\fP to the \fBTransaction\fP. \fP"
.ti -1c
.RI "int \fBaddTransactionInputWithoutReference\fP (\fBTransaction\fP *self, \fBTransactionInput\fP *input)"
.br
.RI "\fIAdds an \fBTransactionInput\fP to the \fBTransaction\fP without retaining it. \fP"
.ti -1c
.RI "int \fBaddTransactionOutputWithoutReference\fP (\fBTransaction\fP *self, \fBTransactionOutput\fP *output)"
.br
.RI "\fIAdds an \fBTransactionOutput\fP to the \fBTransaction\fP without retaining it. \fP"
.ti -1c
.RI "void \fBcalculateTransactionHash\fP (\fBTransaction\fP *self, uint8_t *hash)"
.br
.RI "\fICalculates the hash for a transaction. \fP"
.ti -1c
.RI "uint8_t * \fBgetTransactionHash\fP (\fBTransaction\fP *self)"
.br
.RI "\fIRetrieves or calculates the hash for a transaction. Hashes taken from this function are cached. \fP"
.ti -1c
.RI "uint32_t \fBcalculateTransactionLength\fP (\fBTransaction\fP *self)"
.br
.RI "\fICalculates the length of an \fBTransaction\fP; this is needed to serialise the object. \fP"
.ti -1c
.RI "int \fBisCoinBase\fP (\fBTransaction\fP *self)"
.br
.RI "\fIDetermines if a transaction is a coinbase transaction or not. \fP"
.ti -1c
.RI "uint32_t \fBserializeTransaction\fP (\fBTransaction\fP *self)"
.br
.RI "\fISerialises a \fBTransaction\fP to byte data. \fP"
.ti -1c
.RI "uint32_t \fBdeserializeTransaction\fP (\fBTransaction\fP *self)"
.br
.RI "\fIDeserialises a \fBTransaction\fP so that it can be used as an object. \fP"
.ti -1c
.RI "\fBTransactionHashStatus\fP \fBgetTransactionInputHashForVerification\fP (void *txIn, \fBByteArray\fP *prevOutSubScript, uint32_t input, \fBSignatureType\fP signType, uint8_t *hash)"
.br
.RI "\fIGets the hash for signing or signature checking for a transaction input. The transaction input needs to contain the outPointerHash, outPointerIndex and sequence. If these are modifed afterwards then the signiture is invalid. \fP"
.in -1c
.SH "Function Documentation"
.PP 
.SS "int addTransactionInput (\fBTransaction\fP *self, \fBTransactionInput\fP *input)"
.PP
Adds an \fBTransactionInput\fP to the \fBTransaction\fP. \fBParameters:\fP
.RS 4
\fIself\fP The \fBTransaction\fP object. 
.br
\fIinput\fP The \fBTransactionInput\fP object. 
.RE
.PP
\fBReturns:\fP
.RS 4
true if the transaction input was added successfully and false on error. 
.RE
.PP

.PP
Definition at line 124 of file Transaction.c.
.SS "int addTransactionInputWithoutReference (\fBTransaction\fP *self, \fBTransactionInput\fP *input)"
.PP
Adds an \fBTransactionInput\fP to the \fBTransaction\fP without retaining it. \fBParameters:\fP
.RS 4
\fIself\fP The \fBTransaction\fP object. 
.br
\fIinput\fP The \fBTransactionInput\fP object. 
.RE
.PP
\fBReturns:\fP
.RS 4
true if the transaction input was taken successfully and false on error. 
.RE
.PP

.PP
Definition at line 143 of file Transaction.c.
.SS "int addTransactionOutput (\fBTransaction\fP *self, \fBTransactionOutput\fP *output)"
.PP
Adds an \fBTransactionInput\fP to the \fBTransaction\fP. \fBParameters:\fP
.RS 4
\fIself\fP The \fBTransaction\fP object. 
.br
\fIinput\fP The \fBTransactionOutput\fP object. 
.RE
.PP
\fBReturns:\fP
.RS 4
true if the transaction output was added successfully and false on error. 
.RE
.PP

.PP
Definition at line 133 of file Transaction.c.
.SS "int addTransactionOutputWithoutReference (\fBTransaction\fP *self, \fBTransactionOutput\fP *output)"
.PP
Adds an \fBTransactionOutput\fP to the \fBTransaction\fP without retaining it. \fBParameters:\fP
.RS 4
\fIself\fP The \fBTransaction\fP object. 
.br
\fIinput\fP The \fBTransactionOutput\fP object. 
.RE
.PP
\fBReturns:\fP
.RS 4
true if the transaction output was taken successfully and false on error. 
.RE
.PP

.PP
Definition at line 161 of file Transaction.c.
.SS "void calculateTransactionHash (\fBTransaction\fP *self, uint8_t *hash)"
.PP
Calculates the hash for a transaction. \fBParameters:\fP
.RS 4
\fIself\fP The \fBTransaction\fP object. This should be serialised. 
.br
\fIThe\fP hash for the transaction to be set. This should be 32 bytes long. 
.RE
.PP

.PP
Definition at line 178 of file Transaction.c.
.SS "uint32_t calculateTransactionLength (\fBTransaction\fP *self)"
.PP
Calculates the length of an \fBTransaction\fP; this is needed to serialise the object. \fBParameters:\fP
.RS 4
\fIself\fP The \fBTransaction\fP object. 
.RE
.PP
\fBReturns:\fP
.RS 4
The length of the \fBTransaction\fP on success, 0 on failure. 
.RE
.PP

.PP
Definition at line 201 of file Transaction.c.
.SS "\fBTransaction\fP* createNewTransaction (uint32_tlockTime, uint32_tversion, void(*)(\fBError\fP error, char *,...)onErrorReceived)"
.PP
Creates a new \fBTransaction\fP object with no inputs or outputs. \fBReturns:\fP
.RS 4
A new \fBTransaction\fP object. 
.RE
.PP

.PP
Definition at line 17 of file Transaction.c.
.SS "\fBTransaction\fP* createNewTransactionFromByteArray (\fBByteArray\fP *bytes, void(*)(\fBError\fP error, char *,...)onErrorReceived)"
.PP
Creates a new \fBTransaction\fP object from byte data. Should be serialised for object data. \fBReturns:\fP
.RS 4
A new \fBTransaction\fP object. 
.RE
.PP

.PP
Definition at line 41 of file Transaction.c.
.SS "uint32_t deserializeTransaction (\fBTransaction\fP *self)"
.PP
Deserialises a \fBTransaction\fP so that it can be used as an object. \fBParameters:\fP
.RS 4
\fIself\fP The \fBTransaction\fP object 
.RE
.PP
\fBReturns:\fP
.RS 4
The length read on success, 0 on failure. 
.RE
.PP

.PP
Definition at line 368 of file Transaction.c.
.SS "void destroyTransaction (void *self)"
.PP
Destructor; destroys a \fBTransaction\fP object. \fBParameters:\fP
.RS 4
\fIself\fP The \fBTransaction\fP object to free. 
.RE
.PP

.PP
Definition at line 98 of file Transaction.c.
.SS "\fBTransaction\fP* getTransaction (void *self)"
.PP
Gets a \fBTransaction\fP from another object. Use this to avoid casts. \fBParameters:\fP
.RS 4
\fIself\fP The object to obtain the \fBTransaction\fP from. 
.RE
.PP
\fBReturns:\fP
.RS 4
The \fBTransaction\fP object. 
.RE
.PP

.PP
Definition at line 116 of file Transaction.c.
.SS "uint8_t* getTransactionHash (\fBTransaction\fP *self)"
.PP
Retrieves or calculates the hash for a transaction. Hashes taken from this function are cached. \fBParameters:\fP
.RS 4
\fIself\fP The \fBTransaction\fP object. This should be serialised. 
.RE
.PP
\fBReturns:\fP
.RS 4
The hash for the transaction. This is a 32 byte long, double SHA-256 hash and is a pointer to the hash field in the transaction. 
.RE
.PP

.PP
Definition at line 190 of file Transaction.c.
.SS "\fBTransactionHashStatus\fP getTransactionInputHashForVerification (void *vself, \fBByteArray\fP *prevOutSubScript, uint32_tinput, \fBSignatureType\fPsignType, uint8_t *hash)"
.PP
Gets the hash for signing or signature checking for a transaction input. The transaction input needs to contain the outPointerHash, outPointerIndex and sequence. If these are modifed afterwards then the signiture is invalid. TRANSACTION SIGNING 
.PP
\fBParameters:\fP
.RS 4
\fIvself\fP The \fBTransaction\fP object. 
.br
\fIprevOutSubScript\fP The sub script from the output. Must be the correct one or the signiture will be invalid. 
.br
\fIinput\fP The index of the input to sign. 
.br
\fIsignType\fP The type of signature to get the data for. 
.br
\fIhash\fP The 32 byte data hash for signing or checking signatures. 
.RE
.PP
\fBReturns:\fP
.RS 4
_TX_HASH_OK if the hash has been retreived with no problems. _TX_HASH_BAD is returned if the hash is invalid and _TX_HASH_ERR is returned upon an error. 
.RE
.PP

.PP
Definition at line 520 of file Transaction.c.
.SS "int initializeTransaction (\fBTransaction\fP *self, uint32_tlockTime, uint32_tversion, void(*)(\fBError\fP error, char *,...)onErrorReceived)"
.PP
Initialises a \fBTransaction\fP object. \fBParameters:\fP
.RS 4
\fIself\fP The \fBTransaction\fP object to initialise 
.RE
.PP
\fBReturns:\fP
.RS 4
true on success, false on failure. 
.RE
.PP

.PP
Definition at line 60 of file Transaction.c.
.SS "int initializeTransactionFromByteArray (\fBTransaction\fP *self, \fBByteArray\fP *data, void(*)(\fBError\fP error, char *,...)onErrorReceived)"
.PP
Creates a new \fBTransaction\fP object from byte data. Should be serialised for object data. \fBReturns:\fP
.RS 4
A new \fBTransaction\fP object. 
.RE
.PP

.PP
Definition at line 80 of file Transaction.c.
.SS "int isCoinBase (\fBTransaction\fP *self)"
.PP
Determines if a transaction is a coinbase transaction or not. \fBParameters:\fP
.RS 4
\fIself\fP The \fBTransaction\fP object. 
.RE
.PP
\fBReturns:\fP
.RS 4
true if the transaction is a coin-base transaction or false if not. 
.RE
.PP

.PP
Definition at line 232 of file Transaction.c.
.SS "uint32_t serializeTransaction (\fBTransaction\fP *self)"
.PP
Serialises a \fBTransaction\fP to byte data. \fBParameters:\fP
.RS 4
\fIself\fP The \fBTransaction\fP object. 
.RE
.PP
\fBReturns:\fP
.RS 4
The length read on success, 0 on failure. 
.RE
.PP

.PP
Definition at line 243 of file Transaction.c.
.SH "Author"
.PP 
Generated automatically by Doxygen for Bitcoin from the source code.
