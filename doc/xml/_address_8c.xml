<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.4">
  <compounddef id="_address_8c" kind="file">
    <compoundname>Address.c</compoundname>
    <includes refid="_address_8h" local="yes">Address.h</includes>
    <includes local="yes">../VersionChecksumBytes.h</includes>
    <incdepgraph>
      <node id="1131">
        <label>stdbool.h</label>
      </node>
      <node id="1128">
        <label>src/Object/VersionChecksumBytes/Address/Address.c</label>
        <link refid="Address.c"/>
        <childnode refid="1129" relation="include">
        </childnode>
        <childnode refid="1130" relation="include">
        </childnode>
      </node>
      <node id="1129">
        <label>Address.h</label>
        <link refid="_address_8h"/>
        <childnode refid="1130" relation="include">
        </childnode>
        <childnode refid="1131" relation="include">
        </childnode>
      </node>
      <node id="1130">
        <label>../VersionChecksumBytes.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="_address_8c_1a6ef4823a0762b48c6329403baac9f6b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_address" kindref="compound">Address</ref> *</type>
        <definition>Address* NewAddressFromRIPEMD160Hash</definition>
        <argsstring>(uint8_t *hash, uint8_t networkCode, bool cacheString, void(*onErrorReceived)(Error error, char *,...))</argsstring>
        <name>NewAddressFromRIPEMD160Hash</name>
        <param>
          <type>uint8_t *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>networkCode</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cacheString</declname>
        </param>
        <param>
          <type>void(*)(<ref refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5" kindref="member">Error</ref> error, char *,...)</type>
          <declname>onErrorReceived</declname>
        </param>
        <briefdescription>
<para>Creates a new <ref refid="struct_address" kindref="compound">Address</ref> object from a RIPEMD-160 hash. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>network</parametername>
</parameternamelist>
<parameterdescription>
<para>A NetworkParameters object with the network information. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>The RIPEMD-160 hash. Must be 20 bytes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cacheString</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, the bitcoin string for this object will be cached in memory. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>onErrorReceived</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback for errors. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new <ref refid="struct_address" kindref="compound">Address</ref> object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/VersionChecksumBytes/Address/Address.c" line="13" bodyfile="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/VersionChecksumBytes/Address/Address.c" bodystart="13" bodyend="24"/>
        <references refid="struct_object_1aa353725933e843001d4feb03f8268121" compoundref="_object_8h" startline="29">Object::destroy</references>
        <references refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5ac0a554045048d2fb61387cf735676f69" compoundref="_constants_8h" startline="52">ERROR_OUT_OF_MEMORY</references>
        <references refid="_address_8c_1a2660a066065cdc76c93d847026721cf8" compoundref="_address_8c" startline="76" endline="78">FreeAddress</references>
        <references refid="_object_8c_1a8460165be167be3b0816d84f498e3733" compoundref="_object_8c" startline="42" endline="47">getObject</references>
        <references refid="_address_8c_1a9eb1202db1cb15c5f431b96e3951308c" compoundref="_address_8c" startline="47" endline="68">InitAddressFromRIPEMD160Hash</references>
      </memberdef>
      <memberdef kind="function" id="_address_8c_1a7cd1fc67cf33566c5b0fb7a1bdfb5bae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_address" kindref="compound">Address</ref> *</type>
        <definition>Address* GetAddress</definition>
        <argsstring>(void *self)</argsstring>
        <name>GetAddress</name>
        <param>
          <type>void *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para>Gets a <ref refid="struct_address" kindref="compound">Address</ref> from another object. Use this to avoid casts. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to obtain the <ref refid="struct_address" kindref="compound">Address</ref> from. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The <ref refid="struct_address" kindref="compound">Address</ref> object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/VersionChecksumBytes/Address/Address.c" line="41" bodyfile="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/VersionChecksumBytes/Address/Address.c" bodystart="41" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="_address_8c_1a9eb1202db1cb15c5f431b96e3951308c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool InitAddressFromRIPEMD160Hash</definition>
        <argsstring>(Address *self, uint8_t networkCode, uint8_t *hash, bool cacheString, void(*onErrorReceived)(Error error, char *,...))</argsstring>
        <name>InitAddressFromRIPEMD160Hash</name>
        <param>
          <type><ref refid="struct_address" kindref="compound">Address</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>networkCode</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cacheString</declname>
        </param>
        <param>
          <type>void(*)(<ref refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5" kindref="member">Error</ref> error, char *,...)</type>
          <declname>onErrorReceived</declname>
        </param>
        <briefdescription>
<para>Initialises a <ref refid="struct_address" kindref="compound">Address</ref> object from a RIPEMD-160 hash. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="struct_address" kindref="compound">Address</ref> object to initialise. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>network</parametername>
</parameternamelist>
<parameterdescription>
<para>A NetworkParameters object with the network information. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>The RIPEMD-160 hash. Must be 20 bytes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cacheString</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, the bitcoin string for this object will be cached in memory. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>onErrorReceived</parametername>
</parameternamelist>
<parameterdescription>
<para>Events for errors. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true on success, false on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/VersionChecksumBytes/Address/Address.c" line="47" bodyfile="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/VersionChecksumBytes/Address/Address.c" bodystart="47" bodyend="68"/>
        <references refid="struct_script_byte_vector_1abe222f6d3581e7920dcad5306cc906a8" compoundref="_script_8h" startline="26">ScriptByteVector::data</references>
        <references refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5ac0a554045048d2fb61387cf735676f69" compoundref="_constants_8h" startline="52">ERROR_OUT_OF_MEMORY</references>
        <references refid="_version_checksum_bytes_8c_1ad9aefe5aeda2ebccd370e7b89ed8cd0b" compoundref="_version_checksum_bytes_8c" startline="68" endline="70">GetVersionChecksumBytes</references>
        <references refid="_version_checksum_bytes_8c_1a04d489c466631d1e64fcfbeffc892830" compoundref="_version_checksum_bytes_8c" startline="74" endline="82">InitVersionChecksumBytesFromBytes</references>
        <references refid="_crypt_8c_1a31002de62901cbe9c88a0fd0f5f57770" compoundref="_crypt_8c" startline="42" endline="49">Sha256</references>
        <referencedby refid="_address_8h_1a6ef4823a0762b48c6329403baac9f6b1" compoundref="_address_8c" startline="13" endline="24">NewAddressFromRIPEMD160Hash</referencedby>
      </memberdef>
      <memberdef kind="function" id="_address_8c_1a2660a066065cdc76c93d847026721cf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FreeAddress</definition>
        <argsstring>(void *self)</argsstring>
        <name>FreeAddress</name>
        <param>
          <type>void *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para>Frees a <ref refid="struct_address" kindref="compound">Address</ref> object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="struct_address" kindref="compound">Address</ref> object to free. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/VersionChecksumBytes/Address/Address.c" line="76" bodyfile="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/VersionChecksumBytes/Address/Address.c" bodystart="76" bodyend="78"/>
        <references refid="_version_checksum_bytes_8c_1a7cae99fdf267cb22d4693c908cc896db" compoundref="_version_checksum_bytes_8c" startline="86" endline="90">FreeVersionChecksumBytes</references>
        <references refid="_version_checksum_bytes_8c_1ad9aefe5aeda2ebccd370e7b89ed8cd0b" compoundref="_version_checksum_bytes_8c" startline="68" endline="70">GetVersionChecksumBytes</references>
        <referencedby refid="_address_8h_1a6ef4823a0762b48c6329403baac9f6b1" compoundref="_address_8c" startline="13" endline="24">NewAddressFromRIPEMD160Hash</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Address.c</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/>Created<sp/>on:<sp/>03/10/2012</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/><sp/>Created<sp/>by:<sp/>Hayk<sp/>Baluyan</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/>Copyright<sp/>(c)<sp/>2012<sp/>Bitcoin<sp/>Project<sp/>Team</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_address_8h" kindref="compound" tooltip="Based upon an ECDSA public key and a network version code. Used for receiving bitcoins. Inherits VersionChecksumBytes.">Address.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../VersionChecksumBytes.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13" refid="_address_8h_1a6ef4823a0762b48c6329403baac9f6b1" refkind="member"><highlight class="normal"><ref refid="struct_address" kindref="compound" tooltip="Structure for Address objects.">Address</ref><sp/>*<sp/><ref refid="_address_8c_1a6ef4823a0762b48c6329403baac9f6b1" kindref="member" tooltip="Creates a new Address object from a RIPEMD-160 hash.">NewAddressFromRIPEMD160Hash</ref>(uint8_t<sp/>*<sp/>hash,uint8_t<sp/>networkCode,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cacheString,</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*onErrorReceived)(<ref refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5" kindref="member">Error</ref><sp/>error,</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,...)){</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_address" kindref="compound" tooltip="Structure for Address objects.">Address</ref><sp/>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*</highlight><highlight class="keyword">self</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>onErrorReceived(<ref refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5ac0a554045048d2fb61387cf735676f69" kindref="member">ERROR_OUT_OF_MEMORY</ref>,</highlight><highlight class="stringliteral">&quot;Cannot<sp/>allocate<sp/>%i<sp/>bytes<sp/>of<sp/>memory<sp/>in<sp/>NewAddressFromRIPEMD160Hash\n&quot;</highlight><highlight class="normal">,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*</highlight><highlight class="keyword">self</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_object_8c_1a8460165be167be3b0816d84f498e3733" kindref="member" tooltip="Casts the pointer to the Object; use this to avoid explicitly casting.">getObject</ref>(</highlight><highlight class="keyword">self</highlight><highlight class="normal">)-&gt;<ref refid="struct_object_1aa353725933e843001d4feb03f8268121" kindref="member">destroy</ref><sp/>=<sp/><ref refid="_address_8c_1a2660a066065cdc76c93d847026721cf8" kindref="member" tooltip="Frees a Address object.">FreeAddress</ref>;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_address_8c_1a9eb1202db1cb15c5f431b96e3951308c" kindref="member" tooltip="Initialises a Address object from a RIPEMD-160 hash.">InitAddressFromRIPEMD160Hash</ref>(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,networkCode,hash,cacheString,onErrorReceived))</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(</highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="26"><highlight class="comment">Address<sp/>*<sp/>NewAddressFromString(ByteArray<sp/>*<sp/>string,bool<sp/>cacheString,void<sp/>(*onErrorReceived)(Error<sp/>error,char<sp/>*,...)){</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>*<sp/>self<sp/>=<sp/>malloc(sizeof(*self));</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!<sp/>self)<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>onErrorReceived(ERROR_OUT_OF_MEMORY,&quot;Cannot<sp/>allocate<sp/>%i<sp/>bytes<sp/>of<sp/>memory<sp/>in<sp/>NewAddressFromString\n&quot;,sizeof(*self));</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>NULL;</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getObject(self)-&gt;destroy<sp/>=<sp/>FreeAddress;</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(InitAddressFromString(self,string,cacheString,onErrorReceived))</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>self;</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(self);</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>NULL;</highlight></codeline>
<codeline lineno="37"><highlight class="comment">}</highlight></codeline>
<codeline lineno="38"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="_address_8h_1a7cd1fc67cf33566c5b0fb7a1bdfb5bae" refkind="member"><highlight class="normal"><ref refid="struct_address" kindref="compound" tooltip="Structure for Address objects.">Address</ref><sp/>*<sp/><ref refid="_address_8c_1a7cd1fc67cf33566c5b0fb7a1bdfb5bae" kindref="member" tooltip="Gets a Address from another object. Use this to avoid casts.">GetAddress</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="_address_8h_1a9eb1202db1cb15c5f431b96e3951308c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_address_8c_1a9eb1202db1cb15c5f431b96e3951308c" kindref="member" tooltip="Initialises a Address object from a RIPEMD-160 hash.">InitAddressFromRIPEMD160Hash</ref>(<ref refid="struct_address" kindref="compound" tooltip="Structure for Address objects.">Address</ref><sp/>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,uint8_t<sp/>networkCode,uint8_t<sp/>*<sp/>hash,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cacheString,</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*onErrorReceived)(<ref refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5" kindref="member">Error</ref><sp/>error,</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,...)){</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Build<sp/>address<sp/>and<sp/>then<sp/>complete<sp/>intitialisation<sp/>with<sp/>VersionChecksumBytes*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>*<sp/><ref refid="struct_script_byte_vector_1abe222f6d3581e7920dcad5306cc906a8" kindref="member">data</ref><sp/>=<sp/>malloc(25);<sp/></highlight><highlight class="comment">/*<sp/>1<sp/>Network<sp/>byte,<sp/>20<sp/>hash<sp/>bytes,<sp/>4<sp/>checksum<sp/>bytes.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>data)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>onErrorReceived(<ref refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5ac0a554045048d2fb61387cf735676f69" kindref="member">ERROR_OUT_OF_MEMORY</ref>,</highlight><highlight class="stringliteral">&quot;Cannot<sp/>allocate<sp/>25<sp/>bytes<sp/>of<sp/>memory<sp/>in<sp/>InitAddressFromRIPEMD160Hash\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>network<sp/>byte<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data[0]<sp/>=<sp/>networkCode;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Move<sp/>hash<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memmove(data+1,<sp/>hash,<sp/>20);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Make<sp/>checksum<sp/>and<sp/>move<sp/>it<sp/>into<sp/>address<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>checksum[32];</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>checksum2[32];</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_crypt_8c_1a31002de62901cbe9c88a0fd0f5f57770" kindref="member" tooltip="SHA-256 cryptographic hash function.">Sha256</ref>(data,21,checksum);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_crypt_8c_1a31002de62901cbe9c88a0fd0f5f57770" kindref="member" tooltip="SHA-256 cryptographic hash function.">Sha256</ref>(checksum,32,checksum2);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memmove(data+21,<sp/>checksum2,<sp/>4);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialise<sp/>VersionChecksumBytes*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/><ref refid="_version_checksum_bytes_8c_1a04d489c466631d1e64fcfbeffc892830" kindref="member" tooltip="Initialises a new VersionChecksumBytes object from bytes.">InitVersionChecksumBytesFromBytes</ref>(<ref refid="_version_checksum_bytes_8c_1ad9aefe5aeda2ebccd370e7b89ed8cd0b" kindref="member" tooltip="Gets a VersionChecksumBytes from another object. Use this to avoid casts.">GetVersionChecksumBytes</ref>(</highlight><highlight class="keyword">self</highlight><highlight class="normal">),<sp/>data,<sp/>25,cacheString,<sp/>onErrorReceived))</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="70"><highlight class="comment">bool<sp/>InitAddressFromString(Address<sp/>*<sp/>self,ByteArray<sp/>*<sp/>string,bool<sp/>cacheString,void<sp/>(*onErrorReceived)(Error<sp/>error,char<sp/>*,...)){</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!<sp/>InitVersionChecksumBytesFromString(GetVersionChecksumBytes(self),<sp/>string,<sp/>cacheString,<sp/>onErrorReceived))</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="74"><highlight class="comment">}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="_address_8h_1a2660a066065cdc76c93d847026721cf8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_address_8c_1a2660a066065cdc76c93d847026721cf8" kindref="member" tooltip="Frees a Address object.">FreeAddress</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_version_checksum_bytes_8c_1a7cae99fdf267cb22d4693c908cc896db" kindref="member" tooltip="Frees a VersionChecksumBytes object.">FreeVersionChecksumBytes</ref>(<ref refid="_version_checksum_bytes_8c_1ad9aefe5aeda2ebccd370e7b89ed8cd0b" kindref="member" tooltip="Gets a VersionChecksumBytes from another object. Use this to avoid casts.">GetVersionChecksumBytes</ref>(</highlight><highlight class="keyword">self</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/VersionChecksumBytes/Address/Address.c"/>
  </compounddef>
</doxygen>
