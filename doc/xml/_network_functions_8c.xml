<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.4">
  <compounddef id="_network_functions_8c" kind="file">
    <compoundname>NetworkFunctions.c</compoundname>
    <includes refid="_network_functions_8h" local="yes">NetworkFunctions.h</includes>
    <incdepgraph>
      <node id="659">
        <label>stdbool.h</label>
      </node>
      <node id="656">
        <label>src/NetworkFunctions.c</label>
        <link refid="NetworkFunctions.c"/>
        <childnode refid="657" relation="include">
        </childnode>
      </node>
      <node id="657">
        <label>NetworkFunctions.h</label>
        <link refid="_network_functions_8h"/>
        <childnode refid="658" relation="include">
        </childnode>
        <childnode refid="659" relation="include">
        </childnode>
        <childnode refid="660" relation="include">
        </childnode>
        <childnode refid="661" relation="include">
        </childnode>
      </node>
      <node id="658">
        <label>stdint.h</label>
      </node>
      <node id="660">
        <label>string.h</label>
      </node>
      <node id="661">
        <label>Constants.h</label>
        <link refid="_constants_8h"/>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="_network_functions_8c_1a24b7947d9b095772e90dd5ced5d383f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_constants_8h_1aadb1cfb5fcd8adc562a07248be433d45" kindref="member">IPType</ref></type>
        <definition>IPType getIPType</definition>
        <argsstring>(uint8_t *IP)</argsstring>
        <name>getIPType</name>
        <param>
          <type>uint8_t *</type>
          <declname>IP</declname>
        </param>
        <briefdescription>
<para>Determines the type of IP, including validity. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>IP</parametername>
</parameternamelist>
<parameterdescription>
<para>The IP address to check. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The IP type. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/apopoola/workspace/MIBitcoin/trunk/src/NetworkFunctions.c" line="12" bodyfile="/home/apopoola/workspace/MIBitcoin/trunk/src/NetworkFunctions.c" bodystart="12" bodyend="92"/>
        <references refid="_constants_8h_1aadb1cfb5fcd8adc562a07248be433d45a6eebf14d3c0b3b29a2a60fc9e396ff13" compoundref="_constants_8h" startline="127">IP_6TO4</references>
        <references refid="_constants_8h_1aadb1cfb5fcd8adc562a07248be433d45a2884e83ef767045323bbbb6d85e9d197" compoundref="_constants_8h" startline="129">IP_HENET</references>
        <references refid="_constants_8h_1aadb1cfb5fcd8adc562a07248be433d45a46713e44b63cd4bdaa55b8fb8916941c" compoundref="_constants_8h" startline="124">IP_I2P</references>
        <references refid="_constants_8h_1aadb1cfb5fcd8adc562a07248be433d45a78ad3023e388cdb0edb26a99c1ed5b71" compoundref="_constants_8h" startline="119">IP_INVALID</references>
        <references refid="_constants_8h_1aadb1cfb5fcd8adc562a07248be433d45ada1efeae8e474dedf665973081167ec3" compoundref="_constants_8h" startline="120">IP_IPv4</references>
        <references refid="_constants_8h_1aadb1cfb5fcd8adc562a07248be433d45a5c7c7aafd5c7ea542e80fa0367abe957" compoundref="_constants_8h" startline="121">IP_IPv6</references>
        <references refid="_constants_8h_1aadb1cfb5fcd8adc562a07248be433d45a843ba99ebefa69343b980604fbe93a31" compoundref="_constants_8h" startline="122">IP_LOCAL</references>
        <references refid="_constants_8h_1aadb1cfb5fcd8adc562a07248be433d45aba7032d7b5b6bef01a37f2ee958ec440" compoundref="_constants_8h" startline="126">IP_RFC6052</references>
        <references refid="_constants_8h_1aadb1cfb5fcd8adc562a07248be433d45aefffaa7d148c40f14207d1b970c3238b" compoundref="_constants_8h" startline="125">IP_SITT</references>
        <references refid="_constants_8h_1aadb1cfb5fcd8adc562a07248be433d45a1921e2c3d423fc7ae63ce0b1dc415ae6" compoundref="_constants_8h" startline="128">IP_TEREDO</references>
        <references refid="_constants_8h_1aadb1cfb5fcd8adc562a07248be433d45a8a0b70d40b198adbc9e6c4c8216ed03f" compoundref="_constants_8h" startline="123">IP_TOR</references>
        <references refid="_network_functions_8c_1a21369f59726afc3447ce0bb6c7ab5dd8" compoundref="_network_functions_8c" startline="94" endline="97">isI2P</references>
        <references refid="_network_functions_8c_1a5af1a2b042aa1d6bf30683592bfcc480" compoundref="_network_functions_8c" startline="100" endline="102">isIPv4</references>
        <references refid="_network_functions_8c_1a0e6ec565867a85ceef55d0b83bb047a1" compoundref="_network_functions_8c" startline="103" endline="106">isTor</references>
      </memberdef>
      <memberdef kind="function" id="_network_functions_8c_1a21369f59726afc3447ce0bb6c7ab5dd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int isI2P</definition>
        <argsstring>(uint8_t *IP)</argsstring>
        <name>isI2P</name>
        <param>
          <type>uint8_t *</type>
          <declname>IP</declname>
        </param>
        <briefdescription>
<para>Determines if an IP address is an GarliCat I2P hidden service representation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>IP</parametername>
</parameternamelist>
<parameterdescription>
<para>The IP address to check. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the IP address is an I2P address, false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/apopoola/workspace/MIBitcoin/trunk/src/NetworkFunctions.c" line="94" bodyfile="/home/apopoola/workspace/MIBitcoin/trunk/src/NetworkFunctions.c" bodystart="94" bodyend="97"/>
        <referencedby refid="_network_functions_8h_1a24b7947d9b095772e90dd5ced5d383f8" compoundref="_network_functions_8c" startline="12" endline="92">getIPType</referencedby>
      </memberdef>
      <memberdef kind="function" id="_network_functions_8c_1a5af1a2b042aa1d6bf30683592bfcc480" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int isIPv4</definition>
        <argsstring>(uint8_t *IP)</argsstring>
        <name>isIPv4</name>
        <param>
          <type>uint8_t *</type>
          <declname>IP</declname>
        </param>
        <briefdescription>
<para>Determines if an IP address is an IPv4 address. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>IP</parametername>
</parameternamelist>
<parameterdescription>
<para>The IP address to check. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the IP address is IPv4, false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/apopoola/workspace/MIBitcoin/trunk/src/NetworkFunctions.c" line="100" bodyfile="/home/apopoola/workspace/MIBitcoin/trunk/src/NetworkFunctions.c" bodystart="100" bodyend="102"/>
        <referencedby refid="_network_functions_8h_1a24b7947d9b095772e90dd5ced5d383f8" compoundref="_network_functions_8c" startline="12" endline="92">getIPType</referencedby>
      </memberdef>
      <memberdef kind="function" id="_network_functions_8c_1a0e6ec565867a85ceef55d0b83bb047a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int isTor</definition>
        <argsstring>(uint8_t *IP)</argsstring>
        <name>isTor</name>
        <param>
          <type>uint8_t *</type>
          <declname>IP</declname>
        </param>
        <briefdescription>
<para>Determines if an IP address is an OnionCat Tor hidden service representation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>IP</parametername>
</parameternamelist>
<parameterdescription>
<para>The IP address to check. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the IP address is a Tor address, false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/apopoola/workspace/MIBitcoin/trunk/src/NetworkFunctions.c" line="103" bodyfile="/home/apopoola/workspace/MIBitcoin/trunk/src/NetworkFunctions.c" bodystart="103" bodyend="106"/>
        <referencedby refid="_network_functions_8h_1a24b7947d9b095772e90dd5ced5d383f8" compoundref="_network_functions_8c" startline="12" endline="92">getIPType</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">*<sp/>Constants.h</highlight></codeline>
<codeline lineno="3"><highlight class="comment">*</highlight></codeline>
<codeline lineno="4"><highlight class="comment">*<sp/><sp/>Created<sp/>on:<sp/>26/10/2012</highlight></codeline>
<codeline lineno="5"><highlight class="comment">*<sp/><sp/>Created<sp/>by:<sp/>Attila<sp/>-<sp/>Peter<sp/>Toth</highlight></codeline>
<codeline lineno="6"><highlight class="comment">*<sp/><sp/>Modified<sp/>by:</highlight></codeline>
<codeline lineno="7"><highlight class="comment">*<sp/><sp/>Copyright<sp/>(c)<sp/>2012<sp/>Bitcoin<sp/>Project<sp/>Team</highlight></codeline>
<codeline lineno="8"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_network_functions_8h" kindref="compound">NetworkFunctions.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12" refid="_network_functions_8h_1a24b7947d9b095772e90dd5ced5d383f8" refkind="member"><highlight class="normal"><ref refid="_constants_8h_1aadb1cfb5fcd8adc562a07248be433d45" kindref="member">IPType</ref><sp/><ref refid="_network_functions_8c_1a24b7947d9b095772e90dd5ced5d383f8" kindref="member" tooltip="Determines the type of IP, including validity.">getIPType</ref>(uint8_t<sp/>*<sp/>IP){</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>x<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>loc_rfc[8]<sp/>=<sp/>{0xFE,0x80,0,0,0,0,0,0};</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Shifts<sp/>the<sp/>start<sp/>address<sp/>to<sp/>the<sp/>left<sp/>by<sp/>3<sp/>and<sp/>check<sp/>if<sp/>it<sp/>violates<sp/>the</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>protocol.<sp/>It<sp/>is<sp/>an<sp/>old<sp/>bitcoin<sp/>protocol<sp/>rule.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>memcmp(IP,<sp/>IPv4Start+3,<sp/>9))</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_constants_8h_1aadb1cfb5fcd8adc562a07248be433d45a78ad3023e388cdb0edb26a99c1ed5b71" kindref="member">IP_INVALID</ref>;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*check<sp/>for<sp/>unspecified<sp/>addresses*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>x<sp/>&lt;<sp/>16;<sp/>x++)</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IP[x])<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*The<sp/>address<sp/>consists<sp/>only<sp/>of<sp/>zeros<sp/>-&gt;<sp/>invalid<sp/>IP<sp/>address*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>==<sp/>16)</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_constants_8h_1aadb1cfb5fcd8adc562a07248be433d45a78ad3023e388cdb0edb26a99c1ed5b71" kindref="member">IP_INVALID</ref>;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Check<sp/>x<sp/>first<sp/>to<sp/>see<sp/>that<sp/>the<sp/>first<sp/>byte<sp/>was<sp/>not<sp/>zero.</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Just<sp/>pronErrorReceived<sp/>unnecessary<sp/>memory<sp/>comparisons.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!x<sp/>&amp;&amp;<sp/><ref refid="_network_functions_8c_1a0e6ec565867a85ceef55d0b83bb047a1" kindref="member" tooltip="Determines if an IP address is an OnionCat Tor hidden service representation.">isTor</ref>(IP))</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_constants_8h_1aadb1cfb5fcd8adc562a07248be433d45a8a0b70d40b198adbc9e6c4c8216ed03f" kindref="member">IP_TOR</ref>;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<sp/>x<sp/>&amp;&amp;<sp/><ref refid="_network_functions_8c_1a21369f59726afc3447ce0bb6c7ab5dd8" kindref="member" tooltip="Determines if an IP address is an GarliCat I2P hidden service representation.">isI2P</ref>(IP))</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_constants_8h_1aadb1cfb5fcd8adc562a07248be433d45a46713e44b63cd4bdaa55b8fb8916941c" kindref="member">IP_I2P</ref>;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_network_functions_8c_1a5af1a2b042aa1d6bf30683592bfcc480" kindref="member" tooltip="Determines if an IP address is an IPv4 address.">isIPv4</ref>(IP))<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*modifications<sp/>regarding<sp/>Matthew&apos;s<sp/>code:<sp/>he<sp/>test<sp/>only<sp/>the<sp/>first<sp/>byte<sp/>to<sp/>be</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>equal<sp/>to<sp/>127<sp/>or<sp/>0<sp/>then<sp/>he<sp/>returns<sp/>as<sp/>a<sp/>result<sp/>loopback*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IP[12]<sp/>==<sp/>0x7F<sp/>&amp;&amp;<sp/>IP[13]<sp/>==<sp/>0x0<sp/>&amp;&amp;<sp/>IP[14]<sp/>==<sp/>0x0<sp/>&amp;&amp;<sp/>IP[15]<sp/>==<sp/>0x1)</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Loopback<sp/>address<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_constants_8h_1aadb1cfb5fcd8adc562a07248be433d45ada1efeae8e474dedf665973081167ec3" kindref="member">IP_IPv4</ref><sp/>|<sp/><ref refid="_constants_8h_1aadb1cfb5fcd8adc562a07248be433d45a843ba99ebefa69343b980604fbe93a31" kindref="member">IP_LOCAL</ref>;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>address<sp/>starts<sp/>with<sp/>10.x.x.x<sp/>==<sp/>class<sp/>A<sp/>private<sp/>network;</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>or<sp/>if<sp/>network<sp/>starts<sp/>with<sp/>12.163<sp/>=&gt;<sp/>don&apos;t<sp/>know<sp/>why<sp/>or<sp/>what<sp/>is<sp/>it,<sp/>but<sp/>invalid</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>if<sp/>address<sp/>is<sp/>between<sp/>172.16.x.x<sp/>-<sp/>172.31.x.x<sp/>==<sp/>class<sp/>B<sp/>private<sp/>network.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(IP[12]<sp/>==<sp/>0x0A<sp/>||<sp/>(IP[12]<sp/>==<sp/>0xC0<sp/>&amp;&amp;<sp/>IP[13]<sp/>==<sp/>0xA3)<sp/>||<sp/>(IP[12]<sp/>==<sp/>0xAC<sp/>&amp;&amp;<sp/>(IP[13]<sp/>&gt;=<sp/>0x10<sp/>&amp;&amp;<sp/>IP[13]<sp/>&lt;=<sp/>0x1F)))</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Private<sp/>network*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_constants_8h_1aadb1cfb5fcd8adc562a07248be433d45a78ad3023e388cdb0edb26a99c1ed5b71" kindref="member">IP_INVALID</ref>;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>169.254.x.x<sp/>==<sp/>Link-local<sp/>reserved<sp/>address*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IP[12]<sp/>==<sp/>0xA9<sp/>&amp;&amp;<sp/>IP[13]<sp/>==<sp/>0xFE)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Link-local*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_constants_8h_1aadb1cfb5fcd8adc562a07248be433d45a78ad3023e388cdb0edb26a99c1ed5b71" kindref="member">IP_INVALID</ref>;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Zero<sp/>network,<sp/>only<sp/>valid<sp/>as<sp/>a<sp/>source<sp/>network*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IP[12]<sp/>==<sp/>0x00<sp/>&amp;&amp;<sp/>IP[13]<sp/>==<sp/>0x00<sp/>&amp;&amp;<sp/>IP[14]<sp/>==<sp/>0x00<sp/>&amp;&amp;<sp/>IP[15]<sp/>==<sp/>0x00)</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_constants_8h_1aadb1cfb5fcd8adc562a07248be433d45a78ad3023e388cdb0edb26a99c1ed5b71" kindref="member">IP_INVALID</ref>;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*255.255.255.255<sp/>==<sp/>Broadcast<sp/>address.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IP[12]<sp/>==<sp/>0xFF<sp/>&amp;&amp;<sp/>IP[13]<sp/>==<sp/>0xFF<sp/>&amp;&amp;<sp/>IP[14]<sp/>==<sp/>0xFF<sp/>&amp;&amp;<sp/>IP[15]<sp/>==<sp/>0xFF)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_constants_8h_1aadb1cfb5fcd8adc562a07248be433d45a78ad3023e388cdb0edb26a99c1ed5b71" kindref="member">IP_INVALID</ref>;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_constants_8h_1aadb1cfb5fcd8adc562a07248be433d45ada1efeae8e474dedf665973081167ec3" kindref="member">IP_IPv4</ref>;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>memcmp(IP,<sp/>SITTStart,<sp/>12))<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_constants_8h_1aadb1cfb5fcd8adc562a07248be433d45a5c7c7aafd5c7ea542e80fa0367abe957" kindref="member">IP_IPv6</ref><sp/>|<sp/><ref refid="_constants_8h_1aadb1cfb5fcd8adc562a07248be433d45aefffaa7d148c40f14207d1b970c3238b" kindref="member">IP_SITT</ref>;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>memcmp(IP,<sp/>RFC6052Start,<sp/>12))<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_constants_8h_1aadb1cfb5fcd8adc562a07248be433d45a5c7c7aafd5c7ea542e80fa0367abe957" kindref="member">IP_IPv6</ref><sp/>|<sp/><ref refid="_constants_8h_1aadb1cfb5fcd8adc562a07248be433d45aba7032d7b5b6bef01a37f2ee958ec440" kindref="member">IP_RFC6052</ref>;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IP[0]<sp/>==<sp/>0x20<sp/>&amp;&amp;<sp/>IP[1]<sp/>==<sp/>0x01<sp/>&amp;&amp;<sp/>IP[2]<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>IP[3]<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_constants_8h_1aadb1cfb5fcd8adc562a07248be433d45a5c7c7aafd5c7ea542e80fa0367abe957" kindref="member">IP_IPv6</ref><sp/>|<sp/><ref refid="_constants_8h_1aadb1cfb5fcd8adc562a07248be433d45a1921e2c3d423fc7ae63ce0b1dc415ae6" kindref="member">IP_TEREDO</ref>;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IP[0]<sp/>==<sp/>0x20<sp/>&amp;&amp;<sp/>IP[1]<sp/>==<sp/>0x02)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_constants_8h_1aadb1cfb5fcd8adc562a07248be433d45a5c7c7aafd5c7ea542e80fa0367abe957" kindref="member">IP_IPv6</ref><sp/>|<sp/><ref refid="_constants_8h_1aadb1cfb5fcd8adc562a07248be433d45a6eebf14d3c0b3b29a2a60fc9e396ff13" kindref="member">IP_6TO4</ref>;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IP[0]<sp/>==<sp/>0x20<sp/>&amp;&amp;<sp/>IP[1]<sp/>==<sp/>0x11<sp/>&amp;&amp;<sp/>IP[2]<sp/>==<sp/>0x04<sp/>&amp;&amp;<sp/>IP[3]<sp/>==<sp/>0x70)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_constants_8h_1aadb1cfb5fcd8adc562a07248be433d45a5c7c7aafd5c7ea542e80fa0367abe957" kindref="member">IP_IPv6</ref><sp/>|<sp/><ref refid="_constants_8h_1aadb1cfb5fcd8adc562a07248be433d45a2884e83ef767045323bbbb6d85e9d197" kindref="member">IP_HENET</ref>;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>0:0:0:0:0:0:0:1<sp/>==<sp/>localhost*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>==<sp/>15<sp/>&amp;&amp;<sp/>IP[15]<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_constants_8h_1aadb1cfb5fcd8adc562a07248be433d45a843ba99ebefa69343b980604fbe93a31" kindref="member">IP_LOCAL</ref><sp/>|<sp/><ref refid="_constants_8h_1aadb1cfb5fcd8adc562a07248be433d45a5c7c7aafd5c7ea542e80fa0367abe957" kindref="member">IP_IPv6</ref>;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Documentation*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IP[0]<sp/>==<sp/>0x20<sp/>&amp;&amp;<sp/>IP[1]<sp/>==<sp/>0x01<sp/>&amp;&amp;<sp/>IP[2]<sp/>==<sp/>0x0D<sp/>&amp;&amp;<sp/>IP[3]<sp/>==<sp/>0xB8)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_constants_8h_1aadb1cfb5fcd8adc562a07248be433d45a78ad3023e388cdb0edb26a99c1ed5b71" kindref="member">IP_INVALID</ref>;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Link-Local<sp/>RFC4862<sp/>reserved<sp/>addresses*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>memcmp(IP,<sp/>loc_rfc,<sp/>8))</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_constants_8h_1aadb1cfb5fcd8adc562a07248be433d45a78ad3023e388cdb0edb26a99c1ed5b71" kindref="member">IP_INVALID</ref>;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>RFC4843<sp/>addresses*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IP[0]<sp/>==<sp/>0x20<sp/>&amp;&amp;<sp/>IP[1]<sp/>==<sp/>0x01<sp/>&amp;&amp;<sp/>IP[2]<sp/>==<sp/>0x00<sp/>&amp;&amp;<sp/>(IP[3]<sp/>&amp;<sp/>0xF0)<sp/>==<sp/>0x10)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_constants_8h_1aadb1cfb5fcd8adc562a07248be433d45a78ad3023e388cdb0edb26a99c1ed5b71" kindref="member">IP_INVALID</ref>;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reserved<sp/>Unicast<sp/>addresses*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((IP[0]<sp/>&amp;<sp/>0xFE)<sp/>==<sp/>0xFC)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_constants_8h_1aadb1cfb5fcd8adc562a07248be433d45a78ad3023e388cdb0edb26a99c1ed5b71" kindref="member">IP_INVALID</ref>;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_constants_8h_1aadb1cfb5fcd8adc562a07248be433d45a5c7c7aafd5c7ea542e80fa0367abe957" kindref="member">IP_IPv6</ref>;</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="_network_functions_8h_1a21369f59726afc3447ce0bb6c7ab5dd8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_network_functions_8c_1a21369f59726afc3447ce0bb6c7ab5dd8" kindref="member" tooltip="Determines if an IP address is an GarliCat I2P hidden service representation.">isI2P</ref>(uint8_t<sp/>*<sp/>IP){</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>i2p[6]<sp/>=<sp/>{0xFD,0x60,0xDB,0x4D,0xDD,0xB5};</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!<sp/>memcmp(IP,<sp/>i2p,<sp/>6);</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">/*tests<sp/>if<sp/>the<sp/>address<sp/>properly<sp/>implements<sp/>the<sp/>IPv4<sp/>to<sp/>IPv6<sp/>mapping*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100" refid="_network_functions_8h_1a5af1a2b042aa1d6bf30683592bfcc480" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_network_functions_8c_1a5af1a2b042aa1d6bf30683592bfcc480" kindref="member" tooltip="Determines if an IP address is an IPv4 address.">isIPv4</ref>(uint8_t<sp/>*<sp/>IP){</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!<sp/>memcmp(IP,<sp/>IPv4Start,<sp/>12);</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103" refid="_network_functions_8h_1a0e6ec565867a85ceef55d0b83bb047a1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_network_functions_8c_1a0e6ec565867a85ceef55d0b83bb047a1" kindref="member" tooltip="Determines if an IP address is an OnionCat Tor hidden service representation.">isTor</ref>(uint8_t<sp/>*<sp/>IP){</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>tor[6]<sp/>=<sp/>{0xFD,0x87,0xD8,0x7E,0xEB,0x43};</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>!memcmp(IP,<sp/>tor,<sp/>6);</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/apopoola/workspace/MIBitcoin/trunk/src/NetworkFunctions.c"/>
  </compounddef>
</doxygen>
