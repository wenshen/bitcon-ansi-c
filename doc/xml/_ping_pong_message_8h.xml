<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.4">
  <compounddef id="_ping_pong_message_8h" kind="file">
    <compoundname>PingPongMessage.h</compoundname>
    <includes refid="_message_8h" local="yes">Message.h</includes>
    <includedby refid="_ping_pong_message_8c" local="yes">src/Object/Message/PingPongMessage.c</includedby>
    <incdepgraph>
      <node id="912">
        <label>src/Object/Message/PingPongMessage.h</label>
        <link refid="PingPongMessage.h"/>
        <childnode refid="913" relation="include">
        </childnode>
      </node>
      <node id="915">
        <label>stdint.h</label>
      </node>
      <node id="914">
        <label>stdlib.h</label>
      </node>
      <node id="916">
        <label>../../Constants.h</label>
      </node>
      <node id="913">
        <label>Message.h</label>
        <link refid="_message_8h"/>
        <childnode refid="914" relation="include">
        </childnode>
        <childnode refid="915" relation="include">
        </childnode>
        <childnode refid="916" relation="include">
        </childnode>
        <childnode refid="917" relation="include">
        </childnode>
        <childnode refid="918" relation="include">
        </childnode>
        <childnode refid="919" relation="include">
        </childnode>
      </node>
      <node id="917">
        <label>../ByteArray.h</label>
      </node>
      <node id="918">
        <label>../Object.h</label>
      </node>
      <node id="919">
        <label>../../Utils/VariableLengthInteger/VarLenInt.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="921">
        <label>src/Object/Message/PingPongMessage.c</label>
        <link refid="_ping_pong_message_8c"/>
      </node>
      <node id="920">
        <label>src/Object/Message/PingPongMessage.h</label>
        <link refid="PingPongMessage.h"/>
        <childnode refid="921" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_ping_pong_message" prot="public">PingPongMessage</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="_ping_pong_message_8h_1a70a788fe7df90ccf08a17f3ce98c086f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_ping_pong_message" kindref="compound">PingPongMessage</ref> *</type>
        <definition>PingPongMessage* createNewPingPongMessage</definition>
        <argsstring>(uint64_t ID, void(*onErrorReceived)(Error error, char *,...))</argsstring>
        <name>createNewPingPongMessage</name>
        <param>
          <type>uint64_t</type>
          <declname>ID</declname>
        </param>
        <param>
          <type>void(*)(<ref refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5" kindref="member">Error</ref> error, char *,...)</type>
          <declname>onErrorReceived</declname>
        </param>
        <briefdescription>
<para>Creates a new <ref refid="struct_ping_pong_message" kindref="compound">PingPongMessage</ref> object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ID</parametername>
</parameternamelist>
<parameterdescription>
<para>The identifier used in a ping/pong communication. Set to zero if you don&apos;t want to overlap ping messages </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new <ref refid="struct_ping_pong_message" kindref="compound">PingPongMessage</ref> object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
<para>&lt;assign destructor function to object </para>        </inbodydescription>
        <location file="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/PingPongMessage.h" line="38" bodyfile="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/PingPongMessage.c" bodystart="13" bodyend="31"/>
        <references refid="struct_object_1aa353725933e843001d4feb03f8268121" compoundref="_object_8h" startline="29">Object::destroy</references>
        <references refid="_ping_pong_message_8c_1af528a86083fc33cb25f40d3390b1ee6d" compoundref="_ping_pong_message_8c" startline="87" endline="92">destroyPingPongMessage</references>
        <references refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5ac0a554045048d2fb61387cf735676f69" compoundref="_constants_8h" startline="52">ERROR_OUT_OF_MEMORY</references>
        <references refid="_object_8c_1a8460165be167be3b0816d84f498e3733" compoundref="_object_8c" startline="42" endline="47">getObject</references>
        <references refid="_ping_pong_message_8c_1a7643cf5597d751e59d594aab5e4450af" compoundref="_ping_pong_message_8c" startline="61" endline="71">initializePingPongMessage</references>
      </memberdef>
      <memberdef kind="function" id="_ping_pong_message_8h_1a355536404a1edea909c66e64c338b723" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_ping_pong_message" kindref="compound">PingPongMessage</ref> *</type>
        <definition>PingPongMessage* createNewPingPongMessageFromData</definition>
        <argsstring>(ByteArray *data, void(*onErrorReceived)(Error error, char *,...))</argsstring>
        <name>createNewPingPongMessageFromData</name>
        <param>
          <type><ref refid="struct_byte_array" kindref="compound">ByteArray</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>void(*)(<ref refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5" kindref="member">Error</ref> error, char *,...)</type>
          <declname>onErrorReceived</declname>
        </param>
        <briefdescription>
<para>Creates a new <ref refid="struct_ping_pong_message" kindref="compound">PingPongMessage</ref> object from serialised data. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Serialised <ref refid="struct_ping_pong_message" kindref="compound">PingPongMessage</ref> data. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new <ref refid="struct_ping_pong_message" kindref="compound">PingPongMessage</ref> object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
<para>&lt;assign destructor function to object </para>        </inbodydescription>
        <location file="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/PingPongMessage.h" line="44" bodyfile="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/PingPongMessage.c" bodystart="33" bodyend="52"/>
        <references refid="struct_object_1aa353725933e843001d4feb03f8268121" compoundref="_object_8h" startline="29">Object::destroy</references>
        <references refid="_ping_pong_message_8c_1af528a86083fc33cb25f40d3390b1ee6d" compoundref="_ping_pong_message_8c" startline="87" endline="92">destroyPingPongMessage</references>
        <references refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5ac0a554045048d2fb61387cf735676f69" compoundref="_constants_8h" startline="52">ERROR_OUT_OF_MEMORY</references>
        <references refid="_object_8c_1a8460165be167be3b0816d84f498e3733" compoundref="_object_8c" startline="42" endline="47">getObject</references>
        <references refid="_ping_pong_message_8c_1aa8297d681b90e5975b9d7e88171d06a7" compoundref="_ping_pong_message_8c" startline="73" endline="84">initializePingPongMessageFromData</references>
      </memberdef>
      <memberdef kind="function" id="_ping_pong_message_8h_1a05be54312a74799ff7996459f8f6add9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_ping_pong_message" kindref="compound">PingPongMessage</ref> *</type>
        <definition>PingPongMessage* getPingPongMessage</definition>
        <argsstring>(void *self)</argsstring>
        <name>getPingPongMessage</name>
        <param>
          <type>void *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para>Gets a <ref refid="struct_ping_pong_message" kindref="compound">PingPongMessage</ref> from another object. Use this to avoid casts. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to obtain the <ref refid="struct_ping_pong_message" kindref="compound">PingPongMessage</ref> from. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The <ref refid="struct_ping_pong_message" kindref="compound">PingPongMessage</ref> object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/PingPongMessage.h" line="51" bodyfile="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/PingPongMessage.c" bodystart="54" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="_ping_pong_message_8h_1a7643cf5597d751e59d594aab5e4450af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int initializePingPongMessage</definition>
        <argsstring>(PingPongMessage *self, uint64_t ID, void(*onErrorReceived)(Error error, char *,...))</argsstring>
        <name>initializePingPongMessage</name>
        <param>
          <type><ref refid="struct_ping_pong_message" kindref="compound">PingPongMessage</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>ID</declname>
        </param>
        <param>
          <type>void(*)(<ref refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5" kindref="member">Error</ref> error, char *,...)</type>
          <declname>onErrorReceived</declname>
        </param>
        <briefdescription>
<para>Initialises a <ref refid="struct_ping_pong_message" kindref="compound">PingPongMessage</ref> object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="struct_ping_pong_message" kindref="compound">PingPongMessage</ref> object to initialise </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ID</parametername>
</parameternamelist>
<parameterdescription>
<para>The identifier used in a ping/pong communcation. Set to zero if you don&apos;t want to overlap ping messages </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>One on success, Zero on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/PingPongMessage.h" line="59" bodyfile="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/PingPongMessage.c" bodystart="61" bodyend="71"/>
        <references refid="_constants_8h_1aa93f0eb578d23995850d61f7d61c55c1" compoundref="_constants_8h" startline="89">FALSE</references>
        <references refid="_message_8c_1a9ab128ae9cafefd9b05e2e0bfa719770" compoundref="_message_8c" startline="131" endline="135">getMessage</references>
        <references refid="_message_8c_1abeae03d7e39e468bf5958d4d2b1dc61b" compoundref="_message_8c" startline="94" endline="106">initializeMessageFromObject</references>
        <references refid="_constants_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" compoundref="_constants_8h" startline="90">TRUE</references>
        <referencedby refid="_ping_pong_message_8h_1a70a788fe7df90ccf08a17f3ce98c086f" compoundref="_ping_pong_message_8c" startline="13" endline="31">createNewPingPongMessage</referencedby>
      </memberdef>
      <memberdef kind="function" id="_ping_pong_message_8h_1aa8297d681b90e5975b9d7e88171d06a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int initializePingPongMessageFromData</definition>
        <argsstring>(PingPongMessage *self, ByteArray *data, void(*onErrorReceived)(Error error, char *,...))</argsstring>
        <name>initializePingPongMessageFromData</name>
        <param>
          <type><ref refid="struct_ping_pong_message" kindref="compound">PingPongMessage</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type><ref refid="struct_byte_array" kindref="compound">ByteArray</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>void(*)(<ref refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5" kindref="member">Error</ref> error, char *,...)</type>
          <declname>onErrorReceived</declname>
        </param>
        <briefdescription>
<para>Initialises a <ref refid="struct_ping_pong_message" kindref="compound">PingPongMessage</ref> object from serialised data. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="struct_ping_pong_message" kindref="compound">PingPongMessage</ref> object to initialise </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The serialised data. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>One on success, Zero on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/PingPongMessage.h" line="66" bodyfile="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/PingPongMessage.c" bodystart="73" bodyend="84"/>
        <references refid="_constants_8h_1aa93f0eb578d23995850d61f7d61c55c1" compoundref="_constants_8h" startline="89">FALSE</references>
        <references refid="_message_8c_1a9ab128ae9cafefd9b05e2e0bfa719770" compoundref="_message_8c" startline="131" endline="135">getMessage</references>
        <references refid="_message_8c_1a297413f770355bd4bd2212e999867031" compoundref="_message_8c" startline="108" endline="123">initializeMessageFromByteArrayData</references>
        <references refid="_constants_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" compoundref="_constants_8h" startline="90">TRUE</references>
        <referencedby refid="_ping_pong_message_8h_1a355536404a1edea909c66e64c338b723" compoundref="_ping_pong_message_8c" startline="33" endline="52">createNewPingPongMessageFromData</referencedby>
      </memberdef>
      <memberdef kind="function" id="_ping_pong_message_8h_1af528a86083fc33cb25f40d3390b1ee6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void destroyPingPongMessage</definition>
        <argsstring>(void *self)</argsstring>
        <name>destroyPingPongMessage</name>
        <param>
          <type>void *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para>Frees a <ref refid="struct_ping_pong_message" kindref="compound">PingPongMessage</ref> object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="struct_ping_pong_message" kindref="compound">PingPongMessage</ref> object to free. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/PingPongMessage.h" line="72" bodyfile="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/PingPongMessage.c" bodystart="87" bodyend="92"/>
        <references refid="_message_8c_1ac2c2a78178aac5f9f228b51d01bf5fe3" compoundref="_message_8c" startline="145" endline="154">destroyMessage</references>
        <referencedby refid="_ping_pong_message_8h_1a70a788fe7df90ccf08a17f3ce98c086f" compoundref="_ping_pong_message_8c" startline="13" endline="31">createNewPingPongMessage</referencedby>
        <referencedby refid="_ping_pong_message_8h_1a355536404a1edea909c66e64c338b723" compoundref="_ping_pong_message_8c" startline="33" endline="52">createNewPingPongMessageFromData</referencedby>
      </memberdef>
      <memberdef kind="function" id="_ping_pong_message_8h_1a198cd940373651273997143eab0bcde3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t deserializePingPongMessage</definition>
        <argsstring>(PingPongMessage *self)</argsstring>
        <name>deserializePingPongMessage</name>
        <param>
          <type><ref refid="struct_ping_pong_message" kindref="compound">PingPongMessage</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para>Deserialises a <ref refid="struct_ping_pong_message" kindref="compound">PingPongMessage</ref> so that it can be used as an object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="struct_ping_pong_message" kindref="compound">PingPongMessage</ref> object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Length read if successful, zero otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/PingPongMessage.h" line="79" bodyfile="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/PingPongMessage.c" bodystart="94" bodyend="109"/>
        <references refid="struct_message_1affc357b616afe9b58c190ae4b21caa77" compoundref="_message_8h" startline="33">Message::bytes</references>
        <references refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5a7017f9b2f86ff163d1d6e86cc89b7f63" compoundref="_constants_8h" startline="39">ERROR_MESSAGE_DESERIALISATION_BAD_BYTES</references>
        <references refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5a63040cd367f8f87162668c5853b98d26" compoundref="_constants_8h" startline="40">ERROR_MESSAGE_DESERIALISATION_NULL_BYTES</references>
        <references refid="_message_8c_1a9ab128ae9cafefd9b05e2e0bfa719770" compoundref="_message_8c" startline="131" endline="135">getMessage</references>
        <references refid="struct_byte_array_1aebb70c2aab3407a9f05334c47131a43b" compoundref="_byte_array_8h" startline="33">ByteArray::length</references>
        <references refid="struct_message_1a3c8af4f580f3041d046b7581f89a9695" compoundref="_message_8h" startline="35">Message::onErrorReceived</references>
        <references refid="_byte_array_8c_1a670796ed60ca7c23ac314f0aab3c68c7" compoundref="_byte_array_8c" startline="254" endline="270">readInt64AsLittleEndianFromByteArray</references>
      </memberdef>
      <memberdef kind="function" id="_ping_pong_message_8h_1ab1c318a0853f3a7e93e38d47d9dabd30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t serializePingPongMessage</definition>
        <argsstring>(PingPongMessage *self)</argsstring>
        <name>serializePingPongMessage</name>
        <param>
          <type><ref refid="struct_ping_pong_message" kindref="compound">PingPongMessage</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para>Serialises a <ref refid="struct_ping_pong_message" kindref="compound">PingPongMessage</ref> to the byte data. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="struct_ping_pong_message" kindref="compound">PingPongMessage</ref> object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Length written if successful, zero otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/PingPongMessage.h" line="85" bodyfile="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/PingPongMessage.c" bodystart="111" bodyend="126"/>
        <references refid="struct_message_1affc357b616afe9b58c190ae4b21caa77" compoundref="_message_8h" startline="33">Message::bytes</references>
        <references refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5a60284f8679886500015725682ed0a10d" compoundref="_constants_8h" startline="41">ERROR_MESSAGE_SERIALISATION_BAD_BYTES</references>
        <references refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5a1574daad1526eb894269b75627d86b1e" compoundref="_constants_8h" startline="42">ERROR_MESSAGE_SERIALISATION_NULL_BYTES</references>
        <references refid="_message_8c_1a9ab128ae9cafefd9b05e2e0bfa719770" compoundref="_message_8c" startline="131" endline="135">getMessage</references>
        <references refid="struct_byte_array_1aebb70c2aab3407a9f05334c47131a43b" compoundref="_byte_array_8h" startline="33">ByteArray::length</references>
        <references refid="struct_message_1a3c8af4f580f3041d046b7581f89a9695" compoundref="_message_8h" startline="35">Message::onErrorReceived</references>
        <references refid="_byte_array_8c_1a7bed1ea7fa0945a98bc4548d72236446" compoundref="_byte_array_8c" startline="357" endline="371">writeInt64AsLittleEndianIntoByteArray</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This message contains the nonce ID used in ping and pong messages for protocol versions over 60000. When the protocol version as negotiated in the &quot;ver&quot; message is greater than 60000, the &quot;ping&quot; message must contain a uint64 field called &quot;nonce&quot;. A peer sending &quot;ping&quot; should set the nonce to a random value, and it is then echoed back by the recipient in a new &quot;pong&quot; message that also contains a single uint64 field. see <ulink url="https://en.bitcoin.it/wiki/BIP_0031">https://en.bitcoin.it/wiki/BIP_0031</ulink> A NetworkCommunicator will accept this message for compatible protocol numbers and use an empty message for pings otherwise. Inherits <ref refid="struct_message" kindref="compound">Message</ref>. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>PingPongMessageMessage.h</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/>Created<sp/>on:<sp/>04/10/2012</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/><sp/>Created<sp/>by:<sp/>Abdulfatai<sp/>Popoola</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/>Copyright<sp/>(c)<sp/>2012<sp/>Bitcoin<sp/>Project<sp/>Team</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="preprocessor">#ifndef<sp/>PingPongMessageH</highlight></codeline>
<codeline lineno="21"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PingPongMessageH</highlight></codeline>
<codeline lineno="22"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_message_8h" kindref="compound" tooltip="Header file for the Message object.">Message.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="struct_ping_pong_message" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="29" refid="struct_ping_pong_message_1a8987f797adf70c3e174fd64cc68bc933" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_message" kindref="compound" tooltip="Structure for Message objects.">Message</ref><sp/><ref refid="struct_ping_pong_message_1a8987f797adf70c3e174fd64cc68bc933" kindref="member">base</ref>;<sp/></highlight></codeline>
<codeline lineno="30" refid="struct_ping_pong_message_1a8a30b0f39810620d125df55c023c996e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="struct_ping_pong_message_1a8a30b0f39810620d125df55c023c996e" kindref="member">nonceID</ref>;<sp/></highlight></codeline>
<codeline lineno="31"><highlight class="normal">}<sp/><ref refid="struct_ping_pong_message" kindref="compound" tooltip="Structure for PingPongMessage objects.">PingPongMessage</ref>;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><ref refid="struct_ping_pong_message" kindref="compound" tooltip="Structure for PingPongMessage objects.">PingPongMessage</ref><sp/>*<sp/><ref refid="_ping_pong_message_8c_1ad4c2d31dd467a256504e9fae650ae45c" kindref="member" tooltip="Creates a new PingPongMessage object.">createNewPingPongMessage</ref>(uint64_t<sp/>ID,</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*onErrorReceived)(<ref refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5" kindref="member">Error</ref><sp/>error,</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,...));</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><ref refid="struct_ping_pong_message" kindref="compound" tooltip="Structure for PingPongMessage objects.">PingPongMessage</ref><sp/>*<sp/><ref refid="_ping_pong_message_8c_1a355536404a1edea909c66e64c338b723" kindref="member" tooltip="Creates a new PingPongMessage object from serialised data.">createNewPingPongMessageFromData</ref>(<ref refid="struct_byte_array" kindref="compound" tooltip="Structure for ByteArray objects.">ByteArray</ref><sp/>*<sp/>data,</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*onErrorReceived)(<ref refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5" kindref="member">Error</ref><sp/>error,</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,...));</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><ref refid="struct_ping_pong_message" kindref="compound" tooltip="Structure for PingPongMessage objects.">PingPongMessage</ref><sp/>*<sp/><ref refid="_ping_pong_message_8c_1a05be54312a74799ff7996459f8f6add9" kindref="member" tooltip="Gets a PingPongMessage from another object. Use this to avoid casts.">getPingPongMessage</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_ping_pong_message_8c_1a7643cf5597d751e59d594aab5e4450af" kindref="member" tooltip="Initialises a PingPongMessage object.">initializePingPongMessage</ref>(<ref refid="struct_ping_pong_message" kindref="compound" tooltip="Structure for PingPongMessage objects.">PingPongMessage</ref><sp/>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>uint64_t<sp/>ID,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*onErrorReceived)(<ref refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5" kindref="member">Error</ref><sp/>error,</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,...));</highlight></codeline>
<codeline lineno="66"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_ping_pong_message_8c_1aa8297d681b90e5975b9d7e88171d06a7" kindref="member" tooltip="Initialises a PingPongMessage object from serialised data.">initializePingPongMessageFromData</ref>(<ref refid="struct_ping_pong_message" kindref="compound" tooltip="Structure for PingPongMessage objects.">PingPongMessage</ref><sp/>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<ref refid="struct_byte_array" kindref="compound" tooltip="Structure for ByteArray objects.">ByteArray</ref><sp/>*<sp/>data,</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*onErrorReceived)(<ref refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5" kindref="member">Error</ref><sp/>error,</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,...));</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_ping_pong_message_8c_1af528a86083fc33cb25f40d3390b1ee6d" kindref="member" tooltip="Frees a PingPongMessage object.">destroyPingPongMessage</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal">uint8_t<sp/><ref refid="_ping_pong_message_8c_1a198cd940373651273997143eab0bcde3" kindref="member" tooltip="Deserialises a PingPongMessage so that it can be used as an object.">deserializePingPongMessage</ref>(<ref refid="struct_ping_pong_message" kindref="compound" tooltip="Structure for PingPongMessage objects.">PingPongMessage</ref><sp/>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="85"><highlight class="normal">uint8_t<sp/><ref refid="_ping_pong_message_8c_1ab1c318a0853f3a7e93e38d47d9dabd30" kindref="member" tooltip="Serialises a PingPongMessage to the byte data.">serializePingPongMessage</ref>(<ref refid="struct_ping_pong_message" kindref="compound" tooltip="Structure for PingPongMessage objects.">PingPongMessage</ref><sp/>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/PingPongMessage.h"/>
  </compounddef>
</doxygen>
