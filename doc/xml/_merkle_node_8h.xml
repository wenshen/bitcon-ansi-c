<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.4">
  <compounddef id="_merkle_node_8h" kind="file">
    <compoundname>MerkleNode.h</compoundname>
    <includes local="yes">../Object/ByteArray.h</includes>
    <includedby refid="_merkle_node_8c" local="yes">src/MerkleNode/MerkleNode.c</includedby>
    <incdepgraph>
      <node id="652">
        <label>src/MerkleNode/MerkleNode.h</label>
        <link refid="MerkleNode.h"/>
        <childnode refid="653" relation="include">
        </childnode>
      </node>
      <node id="653">
        <label>../Object/ByteArray.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="655">
        <label>src/MerkleNode/MerkleNode.c</label>
        <link refid="_merkle_node_8c"/>
      </node>
      <node id="654">
        <label>src/MerkleNode/MerkleNode.h</label>
        <link refid="MerkleNode.h"/>
        <childnode refid="655" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_merkle_node" prot="public">MerkleNode</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_merkle_node_8h_1af002199439db0a28afeb08c00d11260f" prot="public" static="no">
        <type>struct <ref refid="struct_merkle_node" kindref="compound">MerkleNode</ref></type>
        <definition>typedef struct MerkleNode MerkleNode</definition>
        <argsstring></argsstring>
        <name>MerkleNode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/apopoola/workspace/MIBitcoin/trunk/src/MerkleNode/MerkleNode.h" line="20" bodyfile="/home/apopoola/workspace/MIBitcoin/trunk/src/MerkleNode/MerkleNode.h" bodystart="20" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_merkle_node_8h_1a211a27939356415dc6fb21842966706e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_merkle_node" kindref="compound">MerkleNode</ref> *</type>
        <definition>MerkleNode* BuildMerkleTree</definition>
        <argsstring>(ByteArray **hashes, uint32_t numHashes)</argsstring>
        <name>BuildMerkleTree</name>
        <param>
          <type><ref refid="struct_byte_array" kindref="compound">ByteArray</ref> **</type>
          <declname>hashes</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>numHashes</declname>
        </param>
        <briefdescription>
<para>Builds a Merkle tree from a list of hashes. In cases of duplication, &quot;left&quot; and &quot;right&quot; may refer to the same node. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hashes</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of hashes as ByteArrays to build the tree from. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numHashes</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of hashes. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The root <ref refid="struct_merkle_node" kindref="compound">MerkleNode</ref> for the tree. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
<para>&lt; Nodes on a level of the tree for processing.</para><para>&lt; Create nodes from the <ref refid="struct_byte_array" kindref="compound">ByteArray</ref> hashes</para><para>&lt; Double SHA256</para><para>&lt; Finished level</para><para>&lt; The number of hashes was odd. Increment to even</para><para>&lt; Move to next level</para><para>&lt; Done, got the single root hash </para>        </inbodydescription>
        <location file="/home/apopoola/workspace/MIBitcoin/trunk/src/MerkleNode/MerkleNode.h" line="37" bodyfile="/home/apopoola/workspace/MIBitcoin/trunk/src/MerkleNode/MerkleNode.c" bodystart="15" bodyend="73"/>
        <references refid="_merkle_node_8c_1adafaa29e779569ee1b9bb32a334ed6de" compoundref="_merkle_node_8c" startline="75" endline="83">FreeMerkleTree</references>
        <references refid="_byte_array_8c_1aceedce9c30c691b211185ee9b454aae4" compoundref="_byte_array_8c" startline="74" endline="78">getByteArrayData</references>
        <references refid="struct_merkle_node_1a7ff9da008bf055da1f1ba994c562057d" compoundref="_merkle_node_8h" startline="26">MerkleNode::hash</references>
        <references refid="struct_merkle_node_1a3292e1ae6fbbb8666d2007bee45b69a1" compoundref="_merkle_node_8h" startline="27">MerkleNode::left</references>
        <references refid="struct_merkle_node_1a131f273991e1615aab021dd945479c62" compoundref="_merkle_node_8h" startline="28">MerkleNode::right</references>
        <references refid="_crypt_8c_1a31002de62901cbe9c88a0fd0f5f57770" compoundref="_crypt_8c" startline="42" endline="49">Sha256</references>
      </memberdef>
      <memberdef kind="function" id="_merkle_node_8h_1adafaa29e779569ee1b9bb32a334ed6de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FreeMerkleTree</definition>
        <argsstring>(MerkleNode *root)</argsstring>
        <name>FreeMerkleTree</name>
        <param>
          <type><ref refid="struct_merkle_node" kindref="compound">MerkleNode</ref> *</type>
          <declname>root</declname>
        </param>
        <briefdescription>
<para>Frees a merkle tree from a given root. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>root</parametername>
</parameternamelist>
<parameterdescription>
<para>The merkle tree root node. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
<para>&lt; Free all levels along the far left </para>        </inbodydescription>
        <location file="/home/apopoola/workspace/MIBitcoin/trunk/src/MerkleNode/MerkleNode.h" line="42" bodyfile="/home/apopoola/workspace/MIBitcoin/trunk/src/MerkleNode/MerkleNode.c" bodystart="75" bodyend="83"/>
        <references refid="struct_merkle_node_1a3292e1ae6fbbb8666d2007bee45b69a1" compoundref="_merkle_node_8h" startline="27">MerkleNode::left</references>
        <referencedby refid="_merkle_node_8h_1a211a27939356415dc6fb21842966706e" compoundref="_merkle_node_8c" startline="15" endline="73">BuildMerkleTree</referencedby>
      </memberdef>
      <memberdef kind="function" id="_merkle_node_8h_1a9624499a6e6439c15f81653328e5d05a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_merkle_node" kindref="compound">MerkleNode</ref> *</type>
        <definition>MerkleNode* MerkleTreeGetLevel</definition>
        <argsstring>(MerkleNode *root, uint8_t level)</argsstring>
        <name>MerkleTreeGetLevel</name>
        <param>
          <type><ref refid="struct_merkle_node" kindref="compound">MerkleNode</ref> *</type>
          <declname>root</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>Gets a list of hashes for a level in a merkle tree. If the merkle tree&apos;s deepest level is smaller than specified by &quot;level&quot;, the lowest level in the tree is returned. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>root</parametername>
</parameternamelist>
<parameterdescription>
<para>The merkle tree root node. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>The level to retrieve. Pass in a high number (use 255) to get the deepest level. Level 0 corresponds to the root which was passed in. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>With nodes left to right, the memory block for this level of the merkle tree. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/apopoola/workspace/MIBitcoin/trunk/src/MerkleNode/MerkleNode.h" line="49" bodyfile="/home/apopoola/workspace/MIBitcoin/trunk/src/MerkleNode/MerkleNode.c" bodystart="85" bodyend="93"/>
        <references refid="struct_merkle_node_1a3292e1ae6fbbb8666d2007bee45b69a1" compoundref="_merkle_node_8h" startline="27">MerkleNode::left</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A structure for a node in a merkle tree. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">*<sp/><sp/>MerkleNode.h</highlight></codeline>
<codeline lineno="3"><highlight class="comment">*</highlight></codeline>
<codeline lineno="4"><highlight class="comment">*<sp/><sp/>Created<sp/>on:<sp/>24/10/2012</highlight></codeline>
<codeline lineno="5"><highlight class="comment">*<sp/><sp/>Created<sp/>by:<sp/>Fadwa<sp/>Alseiari</highlight></codeline>
<codeline lineno="6"><highlight class="comment">*<sp/><sp/>Modified<sp/>by:</highlight></codeline>
<codeline lineno="7"><highlight class="comment">*<sp/><sp/>Copyright<sp/>(c)<sp/>2012<sp/>Bitcoin<sp/>Project<sp/>Team</highlight></codeline>
<codeline lineno="8"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="preprocessor">#ifndef<sp/>MERKLENODEH</highlight></codeline>
<codeline lineno="16"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>MERKLENODEH</highlight></codeline>
<codeline lineno="17"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../Object/ByteArray.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="_merkle_node_8h_1af002199439db0a28afeb08c00d11260f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_merkle_node" kindref="compound">MerkleNode</ref><sp/><ref refid="struct_merkle_node" kindref="compound">MerkleNode</ref>;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="struct_merkle_node" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_merkle_node" kindref="compound">MerkleNode</ref>{</highlight></codeline>
<codeline lineno="26" refid="struct_merkle_node_1a7ff9da008bf055da1f1ba994c562057d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="struct_merkle_node_1a7ff9da008bf055da1f1ba994c562057d" kindref="member">hash</ref>[32];<sp/></highlight></codeline>
<codeline lineno="27" refid="struct_merkle_node_1a3292e1ae6fbbb8666d2007bee45b69a1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_merkle_node" kindref="compound">MerkleNode</ref><sp/>*<sp/><ref refid="struct_merkle_node_1a3292e1ae6fbbb8666d2007bee45b69a1" kindref="member">left</ref>;<sp/></highlight></codeline>
<codeline lineno="28" refid="struct_merkle_node_1a131f273991e1615aab021dd945479c62" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_merkle_node" kindref="compound">MerkleNode</ref><sp/>*<sp/><ref refid="struct_merkle_node_1a131f273991e1615aab021dd945479c62" kindref="member">right</ref>;<sp/></highlight></codeline>
<codeline lineno="29"><highlight class="normal">};</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><ref refid="struct_merkle_node" kindref="compound">MerkleNode</ref><sp/>*<sp/><ref refid="_merkle_node_8c_1a211a27939356415dc6fb21842966706e" kindref="member" tooltip="Builds a Merkle tree from a list of hashes. In cases of duplication, &amp;quot;left&amp;quot; and &amp;quot;right&amp;quot; may refer to ...">BuildMerkleTree</ref>(<ref refid="struct_byte_array" kindref="compound" tooltip="Structure for ByteArray objects.">ByteArray</ref><sp/>**<sp/>hashes,<sp/>uint32_t<sp/>numHashes);</highlight></codeline>
<codeline lineno="42"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_merkle_node_8c_1adafaa29e779569ee1b9bb32a334ed6de" kindref="member" tooltip="Frees a merkle tree from a given root.">FreeMerkleTree</ref>(<ref refid="struct_merkle_node" kindref="compound">MerkleNode</ref><sp/>*<sp/>root);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><ref refid="struct_merkle_node" kindref="compound">MerkleNode</ref><sp/>*<sp/><ref refid="_merkle_node_8c_1a9624499a6e6439c15f81653328e5d05a" kindref="member" tooltip="Gets a list of hashes for a level in a merkle tree. If the merkle tree&amp;#39;s deepest level is smaller tha...">MerkleTreeGetLevel</ref>(<ref refid="struct_merkle_node" kindref="compound">MerkleNode</ref><sp/>*<sp/>root,<sp/>uint8_t<sp/>level);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/apopoola/workspace/MIBitcoin/trunk/src/MerkleNode/MerkleNode.h"/>
  </compounddef>
</doxygen>
