<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.4">
  <compounddef id="_block_headers_8c" kind="file">
    <compoundname>BlockHeaders.c</compoundname>
    <includes refid="_block_headers_8h" local="yes">BlockHeaders.h</includes>
    <includes local="yes">assert.h</includes>
    <incdepgraph>
      <node id="751">
        <label>assert.h</label>
      </node>
      <node id="737">
        <label>Block.h</label>
        <link refid="_block_8h"/>
        <childnode refid="738" relation="include">
        </childnode>
        <childnode refid="750" relation="include">
        </childnode>
        <childnode refid="742" relation="include">
        </childnode>
      </node>
      <node id="741">
        <label>stdint.h</label>
      </node>
      <node id="740">
        <label>stdlib.h</label>
      </node>
      <node id="750">
        <label>../../BigInt/BigInt.h</label>
      </node>
      <node id="742">
        <label>../../Constants.h</label>
      </node>
      <node id="749">
        <label>../../Utils/Cryptography/Crypt.h</label>
      </node>
      <node id="739">
        <label>Message.h</label>
        <link refid="_message_8h"/>
        <childnode refid="740" relation="include">
        </childnode>
        <childnode refid="741" relation="include">
        </childnode>
        <childnode refid="742" relation="include">
        </childnode>
        <childnode refid="743" relation="include">
        </childnode>
        <childnode refid="744" relation="include">
        </childnode>
        <childnode refid="745" relation="include">
        </childnode>
      </node>
      <node id="747">
        <label>../Script.h</label>
      </node>
      <node id="748">
        <label>TransactionOutput.h</label>
        <link refid="_transaction_output_8h"/>
        <childnode refid="739" relation="include">
        </childnode>
        <childnode refid="747" relation="include">
        </childnode>
      </node>
      <node id="746">
        <label>TransactionInput.h</label>
        <link refid="_transaction_input_8h"/>
        <childnode refid="739" relation="include">
        </childnode>
        <childnode refid="747" relation="include">
        </childnode>
        <childnode refid="748" relation="include">
        </childnode>
      </node>
      <node id="743">
        <label>../ByteArray.h</label>
      </node>
      <node id="744">
        <label>../Object.h</label>
      </node>
      <node id="745">
        <label>../../Utils/VariableLengthInteger/VarLenInt.h</label>
      </node>
      <node id="735">
        <label>src/Object/Message/BlockHeaders.c</label>
        <link refid="BlockHeaders.c"/>
        <childnode refid="736" relation="include">
        </childnode>
        <childnode refid="751" relation="include">
        </childnode>
      </node>
      <node id="736">
        <label>BlockHeaders.h</label>
        <link refid="_block_headers_8h"/>
        <childnode refid="737" relation="include">
        </childnode>
      </node>
      <node id="738">
        <label>Transaction.h</label>
        <link refid="_transaction_8h"/>
        <childnode refid="739" relation="include">
        </childnode>
        <childnode refid="746" relation="include">
        </childnode>
        <childnode refid="748" relation="include">
        </childnode>
        <childnode refid="749" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="_block_headers_8c_1a51c1cdd585a18d75265a21f37defac7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> *</type>
        <definition>BlockHeaders* newBlockHeaders</definition>
        <argsstring>(void(*onErrorReceived)(Error error, char *,...))</argsstring>
        <name>newBlockHeaders</name>
        <param>
          <type>void(*)(<ref refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5" kindref="member">Error</ref> error, char *,...)</type>
          <declname>onErrorReceived</declname>
        </param>
        <briefdescription>
<para>Creates a new <ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> object. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A new <ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/BlockHeaders.c" line="14" bodyfile="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/BlockHeaders.c" bodystart="14" bodyend="26"/>
        <references refid="struct_object_1aa353725933e843001d4feb03f8268121" compoundref="_object_8h" startline="29">Object::destroy</references>
        <references refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5ac0a554045048d2fb61387cf735676f69" compoundref="_constants_8h" startline="52">ERROR_OUT_OF_MEMORY</references>
        <references refid="_block_headers_8c_1a98630cb979038b4555bdefb6363af1da" compoundref="_block_headers_8c" startline="68" endline="77">freeBlockHeaders</references>
        <references refid="_object_8c_1a8460165be167be3b0816d84f498e3733" compoundref="_object_8c" startline="42" endline="47">getObject</references>
        <references refid="_block_headers_8c_1ad4e2078ad35828125e6849a43dbcb3db" compoundref="_block_headers_8c" startline="49" endline="56">initBlockHeaders</references>
      </memberdef>
      <memberdef kind="function" id="_block_headers_8c_1a410e43950e869b2178f0e904336bdac7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> *</type>
        <definition>BlockHeaders* newBlockHeadersFromData</definition>
        <argsstring>(ByteArray *data, void(*onErrorReceived)(Error error, char *,...))</argsstring>
        <name>newBlockHeadersFromData</name>
        <param>
          <type><ref refid="struct_byte_array" kindref="compound">ByteArray</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>void(*)(<ref refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5" kindref="member">Error</ref> error, char *,...)</type>
          <declname>onErrorReceived</declname>
        </param>
        <briefdescription>
<para>Creates a new <ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> object from serialized data. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Serialized <ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> data. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new <ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/BlockHeaders.c" line="27" bodyfile="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/BlockHeaders.c" bodystart="27" bodyend="39"/>
        <references refid="struct_object_1aa353725933e843001d4feb03f8268121" compoundref="_object_8h" startline="29">Object::destroy</references>
        <references refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5ac0a554045048d2fb61387cf735676f69" compoundref="_constants_8h" startline="52">ERROR_OUT_OF_MEMORY</references>
        <references refid="_block_headers_8c_1a98630cb979038b4555bdefb6363af1da" compoundref="_block_headers_8c" startline="68" endline="77">freeBlockHeaders</references>
        <references refid="_object_8c_1a8460165be167be3b0816d84f498e3733" compoundref="_object_8c" startline="42" endline="47">getObject</references>
        <references refid="_block_headers_8c_1aefd88cac89497c7f5b47af74b707cea6" compoundref="_block_headers_8c" startline="57" endline="64">initBlockHeadersFromData</references>
      </memberdef>
      <memberdef kind="function" id="_block_headers_8c_1a931382309447b730978686d83006dca8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> *</type>
        <definition>BlockHeaders* getBlockHeaders</definition>
        <argsstring>(void *self)</argsstring>
        <name>getBlockHeaders</name>
        <param>
          <type>void *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para>Gets a <ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> from another object. Use this to avoid casts. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to obtain the <ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> from. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The <ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/BlockHeaders.c" line="43" bodyfile="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/BlockHeaders.c" bodystart="43" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="_block_headers_8c_1ad4e2078ad35828125e6849a43dbcb3db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int initBlockHeaders</definition>
        <argsstring>(BlockHeaders *self, void(*onErrorReceived)(Error error, char *,...))</argsstring>
        <name>initBlockHeaders</name>
        <param>
          <type><ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>void(*)(<ref refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5" kindref="member">Error</ref> error, char *,...)</type>
          <declname>onErrorReceived</declname>
        </param>
        <briefdescription>
<para>Initializes a <ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> object to initialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true on success, false on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/BlockHeaders.c" line="49" bodyfile="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/BlockHeaders.c" bodystart="49" bodyend="56"/>
        <references refid="_constants_8h_1aa93f0eb578d23995850d61f7d61c55c1" compoundref="_constants_8h" startline="89">FALSE</references>
        <references refid="_message_8c_1a9ab128ae9cafefd9b05e2e0bfa719770" compoundref="_message_8c" startline="131" endline="135">getMessage</references>
        <references refid="_message_8c_1abeae03d7e39e468bf5958d4d2b1dc61b" compoundref="_message_8c" startline="94" endline="106">initializeMessageFromObject</references>
        <references refid="_constants_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" compoundref="_constants_8h" startline="90">TRUE</references>
        <referencedby refid="_block_headers_8h_1a51c1cdd585a18d75265a21f37defac7a" compoundref="_block_headers_8c" startline="14" endline="26">newBlockHeaders</referencedby>
      </memberdef>
      <memberdef kind="function" id="_block_headers_8c_1aefd88cac89497c7f5b47af74b707cea6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int initBlockHeadersFromData</definition>
        <argsstring>(BlockHeaders *self, ByteArray *data, void(*onErrorReceived)(Error error, char *,...))</argsstring>
        <name>initBlockHeadersFromData</name>
        <param>
          <type><ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type><ref refid="struct_byte_array" kindref="compound">ByteArray</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>void(*)(<ref refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5" kindref="member">Error</ref> error, char *,...)</type>
          <declname>onErrorReceived</declname>
        </param>
        <briefdescription>
<para>Initializes a <ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> object from serialized data. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> object to initialize </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The serialized data. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true on success, false on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/BlockHeaders.c" line="57" bodyfile="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/BlockHeaders.c" bodystart="57" bodyend="64"/>
        <references refid="_constants_8h_1aa93f0eb578d23995850d61f7d61c55c1" compoundref="_constants_8h" startline="89">FALSE</references>
        <references refid="_message_8c_1a9ab128ae9cafefd9b05e2e0bfa719770" compoundref="_message_8c" startline="131" endline="135">getMessage</references>
        <references refid="_message_8c_1a297413f770355bd4bd2212e999867031" compoundref="_message_8c" startline="108" endline="123">initializeMessageFromByteArrayData</references>
        <references refid="_constants_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" compoundref="_constants_8h" startline="90">TRUE</references>
        <referencedby refid="_block_headers_8h_1a410e43950e869b2178f0e904336bdac7" compoundref="_block_headers_8c" startline="27" endline="39">newBlockHeadersFromData</referencedby>
      </memberdef>
      <memberdef kind="function" id="_block_headers_8c_1a98630cb979038b4555bdefb6363af1da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void freeBlockHeaders</definition>
        <argsstring>(void *vself)</argsstring>
        <name>freeBlockHeaders</name>
        <param>
          <type>void *</type>
          <declname>self</declname>
          <defname>vself</defname>
        </param>
        <briefdescription>
<para>Frees a <ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> object to free. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/BlockHeaders.c" line="68" bodyfile="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/BlockHeaders.c" bodystart="68" bodyend="77"/>
        <references refid="_message_8c_1ac2c2a78178aac5f9f228b51d01bf5fe3" compoundref="_message_8c" startline="145" endline="154">destroyMessage</references>
        <references refid="_object_8c_1a9773962d80072e39e235802b57907208" compoundref="_object_8c" startline="59" endline="63">destroyObject</references>
        <referencedby refid="_block_headers_8h_1a51c1cdd585a18d75265a21f37defac7a" compoundref="_block_headers_8c" startline="14" endline="26">newBlockHeaders</referencedby>
        <referencedby refid="_block_headers_8h_1a410e43950e869b2178f0e904336bdac7" compoundref="_block_headers_8c" startline="27" endline="39">newBlockHeadersFromData</referencedby>
      </memberdef>
      <memberdef kind="function" id="_block_headers_8c_1a9f0f95e6fb11bea9a15416fa7131515a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int addBlockHeaderToBlockHeaderList</definition>
        <argsstring>(BlockHeaders *self, Block *header)</argsstring>
        <name>addBlockHeaderToBlockHeaderList</name>
        <param>
          <type><ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type><ref refid="struct_block" kindref="compound">Block</ref> *</type>
          <declname>header</declname>
        </param>
        <briefdescription>
<para>Adds a <ref refid="struct_block" kindref="compound">Block</ref> into the block header list. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="struct_block" kindref="compound">Block</ref> to add. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the block header was added successfully or false on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/BlockHeaders.c" line="80" bodyfile="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/BlockHeaders.c" bodystart="80" bodyend="84"/>
        <references refid="_object_8c_1a5f22211b2f99a33c1b4b7ad544ce108a" compoundref="_object_8c" startline="81" endline="92">incrementReferenceCount</references>
        <references refid="_block_headers_8c_1a89997b50a9646d1558b1c215d2de0cdf" compoundref="_block_headers_8c" startline="178" endline="187">takeBlockFromBlockHeaderList</references>
      </memberdef>
      <memberdef kind="function" id="_block_headers_8c_1a0f85776f4a67bf22fb092b54e9afbcf5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t calculateBlockHeadersLength</definition>
        <argsstring>(BlockHeaders *self)</argsstring>
        <name>calculateBlockHeadersLength</name>
        <param>
          <type><ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para>Calculates the length needed to serialize the object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> object. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The length read on success, 0 on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/BlockHeaders.c" line="85" bodyfile="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/BlockHeaders.c" bodystart="85" bodyend="88"/>
        <references refid="_var_len_int_8c_1a9a5568c05dc89004c60b0a1679b38ba6" compoundref="_var_len_int_8c" startline="82" endline="94">getSizeOfVarLenInt</references>
      </memberdef>
      <memberdef kind="function" id="_block_headers_8c_1ace10b6ab479717f0540e5a5528ca3952" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t deserializeBlockHeaders</definition>
        <argsstring>(BlockHeaders *self)</argsstring>
        <name>deserializeBlockHeaders</name>
        <param>
          <type><ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para>Deserializes a <ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> so that it can be used as an object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The length read on success, 0 on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/BlockHeaders.c" line="89" bodyfile="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/BlockHeaders.c" bodystart="89" bodyend="140"/>
        <references refid="struct_message_1affc357b616afe9b58c190ae4b21caa77" compoundref="_message_8h" startline="33">Message::bytes</references>
        <references refid="_block_8c_1a522ff05175c1944559e2001a51d8da90" compoundref="_block_8c" startline="58" endline="77">createNewBlockFromByteArray</references>
        <references refid="_var_len_int_8c_1a4dd8c16aa70756e7ab6c0845a09358af" compoundref="_var_len_int_8c" startline="13" endline="43">decodeVarLenInt</references>
        <references refid="_block_8c_1a9dcdbbf01ad57512119aa46013c7f92e" compoundref="_block_8c" startline="272" endline="312">deserializeBlock</references>
        <references refid="_object_8c_1a9773962d80072e39e235802b57907208" compoundref="_object_8c" startline="59" endline="63">destroyObject</references>
        <references refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5a61583dbb5057f77e6fc74ab42bea43ce" compoundref="_constants_8h" startline="53">ERROR_INIT_FAIL</references>
        <references refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5a7017f9b2f86ff163d1d6e86cc89b7f63" compoundref="_constants_8h" startline="39">ERROR_MESSAGE_DESERIALISATION_BAD_BYTES</references>
        <references refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5a63040cd367f8f87162668c5853b98d26" compoundref="_constants_8h" startline="40">ERROR_MESSAGE_DESERIALISATION_NULL_BYTES</references>
        <references refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5ac0a554045048d2fb61387cf735676f69" compoundref="_constants_8h" startline="52">ERROR_OUT_OF_MEMORY</references>
        <references refid="_byte_array_8c_1aefe112436e17fc5a1c56d263596a612b" compoundref="_byte_array_8c" startline="105" endline="131">getByteArraySubsectionReference</references>
        <references refid="_message_8c_1a9ab128ae9cafefd9b05e2e0bfa719770" compoundref="_message_8c" startline="131" endline="135">getMessage</references>
        <references refid="struct_byte_array_1aebb70c2aab3407a9f05334c47131a43b" compoundref="_byte_array_8h" startline="33">ByteArray::length</references>
        <references refid="struct_message_1a3c8af4f580f3041d046b7581f89a9695" compoundref="_message_8h" startline="35">Message::onErrorReceived</references>
        <references refid="struct_var_len_int_1af922c72fe1d5915971491918ff5f923e" compoundref="_var_len_int_8h" startline="28">VarLenInt::storageSize</references>
        <references refid="struct_var_len_int_1a4e630859cc0e2a22bd6acf39a6a8e218" compoundref="_var_len_int_8h" startline="27">VarLenInt::value</references>
      </memberdef>
      <memberdef kind="function" id="_block_headers_8c_1a06fe7338aa2dc8d104e7f8148674b202" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t serializeBlockHeaders</definition>
        <argsstring>(BlockHeaders *self)</argsstring>
        <name>serializeBlockHeaders</name>
        <param>
          <type><ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para>Serializes a <ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> to the byte data. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The length written on success, 0 on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/BlockHeaders.c" line="141" bodyfile="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/BlockHeaders.c" bodystart="141" bodyend="176"/>
        <references refid="struct_message_1affc357b616afe9b58c190ae4b21caa77" compoundref="_message_8h" startline="33">Message::bytes</references>
        <references refid="_var_len_int_8c_1a784e8aad4e7aead2119ede96096f33a9" compoundref="_var_len_int_8c" startline="71" endline="80">createVarLenIntFromUInt64</references>
        <references refid="_object_8c_1a9773962d80072e39e235802b57907208" compoundref="_object_8c" startline="59" endline="63">destroyObject</references>
        <references refid="_var_len_int_8c_1a12852f478f7fcd7cacc0b150fa7fe12a" compoundref="_var_len_int_8c" startline="45" endline="69">encodeVarLenInt</references>
        <references refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5a61583dbb5057f77e6fc74ab42bea43ce" compoundref="_constants_8h" startline="53">ERROR_INIT_FAIL</references>
        <references refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5a7017f9b2f86ff163d1d6e86cc89b7f63" compoundref="_constants_8h" startline="39">ERROR_MESSAGE_DESERIALISATION_BAD_BYTES</references>
        <references refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5a60284f8679886500015725682ed0a10d" compoundref="_constants_8h" startline="41">ERROR_MESSAGE_SERIALISATION_BAD_BYTES</references>
        <references refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5a1574daad1526eb894269b75627d86b1e" compoundref="_constants_8h" startline="42">ERROR_MESSAGE_SERIALISATION_NULL_BYTES</references>
        <references refid="_byte_array_8c_1aefe112436e17fc5a1c56d263596a612b" compoundref="_byte_array_8c" startline="105" endline="131">getByteArraySubsectionReference</references>
        <references refid="_message_8c_1a9ab128ae9cafefd9b05e2e0bfa719770" compoundref="_message_8c" startline="131" endline="135">getMessage</references>
        <references refid="struct_byte_array_1aebb70c2aab3407a9f05334c47131a43b" compoundref="_byte_array_8h" startline="33">ByteArray::length</references>
        <references refid="struct_message_1a3c8af4f580f3041d046b7581f89a9695" compoundref="_message_8h" startline="35">Message::onErrorReceived</references>
        <references refid="_block_8c_1ab0d1c25a8612a3644626e5030ffbe456" compoundref="_block_8c" startline="444" endline="472">serializeBlock</references>
        <references refid="struct_var_len_int_1af922c72fe1d5915971491918ff5f923e" compoundref="_var_len_int_8h" startline="28">VarLenInt::storageSize</references>
        <references refid="struct_var_len_int_1a4e630859cc0e2a22bd6acf39a6a8e218" compoundref="_var_len_int_8h" startline="27">VarLenInt::value</references>
      </memberdef>
      <memberdef kind="function" id="_block_headers_8c_1a89997b50a9646d1558b1c215d2de0cdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int takeBlockFromBlockHeaderList</definition>
        <argsstring>(BlockHeaders *self, Block *header)</argsstring>
        <name>takeBlockFromBlockHeaderList</name>
        <param>
          <type><ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type><ref refid="struct_block" kindref="compound">Block</ref> *</type>
          <declname>header</declname>
        </param>
        <briefdescription>
<para>Takes a <ref refid="struct_block" kindref="compound">Block</ref> for the block header list. This does not retain the <ref refid="struct_block" kindref="compound">Block</ref> so you can pass an <ref refid="struct_block" kindref="compound">Block</ref> into this while releasing control from the calling function. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="struct_block" kindref="compound">Block</ref> to take. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the block header was taken successfully or false on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/BlockHeaders.c" line="178" bodyfile="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/BlockHeaders.c" bodystart="178" bodyend="187"/>
        <references refid="_constants_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" compoundref="_constants_8h" startline="90">TRUE</references>
        <referencedby refid="_block_headers_8h_1a9f0f95e6fb11bea9a15416fa7131515a" compoundref="_block_headers_8c" startline="80" endline="84">addBlockHeaderToBlockHeaderList</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>BlockHeaders.c</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Created<sp/>on:<sp/>Nov<sp/>8,<sp/>2012</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Created<sp/>by:<sp/>Wen<sp/>Shen</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2012<sp/>MIBitcoin<sp/>Project<sp/>Team</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_block_headers_8h" kindref="compound" tooltip="A message used to send and receive block headers. Inherits Message.">BlockHeaders.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;assert.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="_block_headers_8h_1a51c1cdd585a18d75265a21f37defac7a" refkind="member"><highlight class="normal"><ref refid="struct_block_headers" kindref="compound" tooltip="Structure for BlockHeaders objects.">BlockHeaders</ref><sp/>*<sp/><ref refid="_block_headers_8c_1a51c1cdd585a18d75265a21f37defac7a" kindref="member" tooltip="Creates a new BlockHeaders object.">newBlockHeaders</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*onErrorReceived)(<ref refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5" kindref="member">Error</ref><sp/>error,</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,...)){</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(onErrorReceived<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>onErrorReceived<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_block_headers" kindref="compound" tooltip="Structure for BlockHeaders objects.">BlockHeaders</ref><sp/>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*</highlight><highlight class="keyword">self</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!</highlight><highlight class="keyword">self</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>onErrorReceived(<ref refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5ac0a554045048d2fb61387cf735676f69" kindref="member">ERROR_OUT_OF_MEMORY</ref>,</highlight><highlight class="stringliteral">&quot;Cannot<sp/>allocate<sp/>%i<sp/>bytes<sp/>of<sp/>memory<sp/>in<sp/>newBlockHeaders\n&quot;</highlight><highlight class="normal">,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*</highlight><highlight class="keyword">self</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_object_8c_1a8460165be167be3b0816d84f498e3733" kindref="member" tooltip="Casts the pointer to the Object; use this to avoid explicitly casting.">getObject</ref>(</highlight><highlight class="keyword">self</highlight><highlight class="normal">)-&gt;<ref refid="struct_object_1aa353725933e843001d4feb03f8268121" kindref="member">destroy</ref><sp/>=<sp/><ref refid="_block_headers_8c_1a98630cb979038b4555bdefb6363af1da" kindref="member" tooltip="Frees a BlockHeaders object.">freeBlockHeaders</ref>;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="_block_headers_8c_1ad4e2078ad35828125e6849a43dbcb3db" kindref="member" tooltip="Initializes a BlockHeaders object.">initBlockHeaders</ref>(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,onErrorReceived))</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(</highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
<codeline lineno="27" refid="_block_headers_8h_1a410e43950e869b2178f0e904336bdac7" refkind="member"><highlight class="normal"><ref refid="struct_block_headers" kindref="compound" tooltip="Structure for BlockHeaders objects.">BlockHeaders</ref><sp/>*<sp/><ref refid="_block_headers_8c_1a410e43950e869b2178f0e904336bdac7" kindref="member" tooltip="Creates a new BlockHeaders object from serialized data.">newBlockHeadersFromData</ref>(<ref refid="struct_byte_array" kindref="compound" tooltip="Structure for ByteArray objects.">ByteArray</ref><sp/>*<sp/>data,</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*onErrorReceived)(<ref refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5" kindref="member">Error</ref><sp/>error,</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,...)){</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(data<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>onErrorReceived<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_block_headers" kindref="compound" tooltip="Structure for BlockHeaders objects.">BlockHeaders</ref><sp/>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*</highlight><highlight class="keyword">self</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!</highlight><highlight class="keyword">self</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>onErrorReceived(<ref refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5ac0a554045048d2fb61387cf735676f69" kindref="member">ERROR_OUT_OF_MEMORY</ref>,</highlight><highlight class="stringliteral">&quot;Cannot<sp/>allocate<sp/>%i<sp/>bytes<sp/>of<sp/>memory<sp/>in<sp/>newBlockHeadersFromData\n&quot;</highlight><highlight class="normal">,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*</highlight><highlight class="keyword">self</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_object_8c_1a8460165be167be3b0816d84f498e3733" kindref="member" tooltip="Casts the pointer to the Object; use this to avoid explicitly casting.">getObject</ref>(</highlight><highlight class="keyword">self</highlight><highlight class="normal">)-&gt;<ref refid="struct_object_1aa353725933e843001d4feb03f8268121" kindref="member">destroy</ref><sp/>=<sp/><ref refid="_block_headers_8c_1a98630cb979038b4555bdefb6363af1da" kindref="member" tooltip="Frees a BlockHeaders object.">freeBlockHeaders</ref>;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="_block_headers_8c_1aefd88cac89497c7f5b47af74b707cea6" kindref="member" tooltip="Initializes a BlockHeaders object from serialized data.">initBlockHeadersFromData</ref>(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,data,onErrorReceived))</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(</highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Object<sp/>Getter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="_block_headers_8h_1a931382309447b730978686d83006dca8" refkind="member"><highlight class="normal"><ref refid="struct_block_headers" kindref="compound" tooltip="Structure for BlockHeaders objects.">BlockHeaders</ref><sp/>*<sp/><ref refid="_block_headers_8c_1a931382309447b730978686d83006dca8" kindref="member" tooltip="Gets a BlockHeaders from another object. Use this to avoid casts.">getBlockHeaders</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(</highlight><highlight class="keyword">self</highlight><highlight class="normal">!=<sp/>NULL);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="_block_headers_8h_1ad4e2078ad35828125e6849a43dbcb3db" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_block_headers_8c_1ad4e2078ad35828125e6849a43dbcb3db" kindref="member" tooltip="Initializes a BlockHeaders object.">initBlockHeaders</ref>(<ref refid="struct_block_headers" kindref="compound" tooltip="Structure for BlockHeaders objects.">BlockHeaders</ref><sp/>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*onErrorReceived)(<ref refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5" kindref="member">Error</ref><sp/>error,</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,...)){</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(</highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>onErrorReceived<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;numOfHeaders<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;blockHeaders<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="_message_8c_1abeae03d7e39e468bf5958d4d2b1dc61b" kindref="member" tooltip="Initialises a Message object.">initializeMessageFromObject</ref>(<ref refid="_message_8c_1a9ab128ae9cafefd9b05e2e0bfa719770" kindref="member" tooltip="getter">getMessage</ref>(</highlight><highlight class="keyword">self</highlight><highlight class="normal">),<sp/>onErrorReceived))</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_constants_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_constants_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57" refid="_block_headers_8h_1aefd88cac89497c7f5b47af74b707cea6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_block_headers_8c_1aefd88cac89497c7f5b47af74b707cea6" kindref="member" tooltip="Initializes a BlockHeaders object from serialized data.">initBlockHeadersFromData</ref>(<ref refid="struct_block_headers" kindref="compound" tooltip="Structure for BlockHeaders objects.">BlockHeaders</ref><sp/>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<ref refid="struct_byte_array" kindref="compound" tooltip="Structure for ByteArray objects.">ByteArray</ref><sp/>*<sp/>data,</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*onErrorReceived)(<ref refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5" kindref="member">Error</ref><sp/>error,</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,...)){</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(</highlight><highlight class="keyword">self</highlight><highlight class="normal">!=<sp/>NULL<sp/>&amp;&amp;<sp/>data<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>onErrorReceived<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;numOfHeaders<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;blockHeaders<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/><ref refid="_message_8c_1a297413f770355bd4bd2212e999867031" kindref="member" tooltip="Initialises a Message object from byteArray data.">initializeMessageFromByteArrayData</ref>(<ref refid="_message_8c_1a9ab128ae9cafefd9b05e2e0bfa719770" kindref="member" tooltip="getter">getMessage</ref>(</highlight><highlight class="keyword">self</highlight><highlight class="normal">),<sp/>data,<sp/>onErrorReceived))</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_constants_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_constants_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="_block_headers_8h_1adb988cdb814bfc8fa966046c04fe04df" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_block_headers_8c_1a98630cb979038b4555bdefb6363af1da" kindref="member" tooltip="Frees a BlockHeaders object.">freeBlockHeaders</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>vself){</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(vself<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_block_headers" kindref="compound" tooltip="Structure for BlockHeaders objects.">BlockHeaders</ref><sp/>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>=<sp/>vself;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>x;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;numOfHeaders;<sp/>x++)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_object_8c_1a9773962d80072e39e235802b57907208" kindref="member" tooltip="destructor">destroyObject</ref>(self-&gt;blockHeaders[x]);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(self-&gt;blockHeaders);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_message_8c_1ac2c2a78178aac5f9f228b51d01bf5fe3" kindref="member" tooltip="destroy Message">destroyMessage</ref>(</highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="_block_headers_8h_1a9f0f95e6fb11bea9a15416fa7131515a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_block_headers_8c_1a9f0f95e6fb11bea9a15416fa7131515a" kindref="member" tooltip="Adds a Block into the block header list.">addBlockHeaderToBlockHeaderList</ref>(<ref refid="struct_block_headers" kindref="compound" tooltip="Structure for BlockHeaders objects.">BlockHeaders</ref><sp/>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<ref refid="struct_block" kindref="compound" tooltip="Base class.">Block</ref><sp/>*<sp/>header){</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(</highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>header<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_object_8c_1a5f22211b2f99a33c1b4b7ad544ce108a" kindref="member" tooltip="Increase the number in the reference counter. (It keeps track of how many objects have been created)...">incrementReferenceCount</ref>(header);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_block_headers_8c_1a89997b50a9646d1558b1c215d2de0cdf" kindref="member" tooltip="Takes a Block for the block header list. This does not retain the Block so you can pass an Block into...">takeBlockFromBlockHeaderList</ref>(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,header);</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85" refid="_block_headers_8h_1a0f85776f4a67bf22fb092b54e9afbcf5" refkind="member"><highlight class="normal">uint32_t<sp/><ref refid="_block_headers_8c_1a0f85776f4a67bf22fb092b54e9afbcf5" kindref="member" tooltip="Calculates the length needed to serialize the object.">calculateBlockHeadersLength</ref>(<ref refid="struct_block_headers" kindref="compound" tooltip="Structure for BlockHeaders objects.">BlockHeaders</ref><sp/>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(</highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_var_len_int_8c_1a9a5568c05dc89004c60b0a1679b38ba6" kindref="member" tooltip="Returns the variable integer byte size of a 64 bit integer.">getSizeOfVarLenInt</ref>(self-&gt;numOfHeaders)<sp/>+<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;numOfHeaders<sp/>*<sp/>81;</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89" refid="_block_headers_8h_1ace10b6ab479717f0540e5a5528ca3952" refkind="member"><highlight class="normal">uint32_t<sp/><ref refid="_block_headers_8c_1ace10b6ab479717f0540e5a5528ca3952" kindref="member" tooltip="Deserializes a BlockHeaders so that it can be used as an object.">deserializeBlockHeaders</ref>(<ref refid="struct_block_headers" kindref="compound" tooltip="Structure for BlockHeaders objects.">BlockHeaders</ref><sp/>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(</highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_byte_array" kindref="compound" tooltip="Structure for ByteArray objects.">ByteArray</ref><sp/>*<sp/>bytes<sp/>=<sp/><ref refid="_message_8c_1a9ab128ae9cafefd9b05e2e0bfa719770" kindref="member" tooltip="getter">getMessage</ref>(</highlight><highlight class="keyword">self</highlight><highlight class="normal">)-&gt;<ref refid="struct_message_1affc357b616afe9b58c190ae4b21caa77" kindref="member">bytes</ref>;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bytes)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_message_8c_1a9ab128ae9cafefd9b05e2e0bfa719770" kindref="member" tooltip="getter">getMessage</ref>(</highlight><highlight class="keyword">self</highlight><highlight class="normal">)-&gt;<ref refid="struct_message_1a3c8af4f580f3041d046b7581f89a9695" kindref="member">onErrorReceived</ref>(<ref refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5a63040cd367f8f87162668c5853b98d26" kindref="member">ERROR_MESSAGE_DESERIALISATION_NULL_BYTES</ref>,</highlight><highlight class="stringliteral">&quot;Attempting<sp/>to<sp/>deserialize<sp/>a<sp/>BlockHeaders<sp/>with<sp/>no<sp/>bytes.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytes-&gt;<ref refid="struct_byte_array_1aebb70c2aab3407a9f05334c47131a43b" kindref="member">length</ref><sp/>&lt;<sp/>82)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_message_8c_1a9ab128ae9cafefd9b05e2e0bfa719770" kindref="member" tooltip="getter">getMessage</ref>(</highlight><highlight class="keyword">self</highlight><highlight class="normal">)-&gt;<ref refid="struct_message_1a3c8af4f580f3041d046b7581f89a9695" kindref="member">onErrorReceived</ref>(<ref refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5a7017f9b2f86ff163d1d6e86cc89b7f63" kindref="member">ERROR_MESSAGE_DESERIALISATION_BAD_BYTES</ref>,</highlight><highlight class="stringliteral">&quot;Attempting<sp/>to<sp/>deserialize<sp/>a<sp/>BlockHeaders<sp/>with<sp/>less<sp/>bytes<sp/>than<sp/>required<sp/>for<sp/>one<sp/>header.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_var_len_int" kindref="compound" tooltip="Variable length integer specified in Bitcoin protocol.">VarLenInt</ref><sp/>numOfHeaders<sp/>=<sp/><ref refid="_var_len_int_8c_1a4dd8c16aa70756e7ab6c0845a09358af" kindref="member" tooltip="Decodes variable size integer from bytes into a VarLenInt structure.">decodeVarLenInt</ref>(bytes,<sp/>0);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numOfHeaders.<ref refid="struct_var_len_int_1a4e630859cc0e2a22bd6acf39a6a8e218" kindref="member">value</ref><sp/>&gt;<sp/>2000)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_message_8c_1a9ab128ae9cafefd9b05e2e0bfa719770" kindref="member" tooltip="getter">getMessage</ref>(</highlight><highlight class="keyword">self</highlight><highlight class="normal">)-&gt;<ref refid="struct_message_1a3c8af4f580f3041d046b7581f89a9695" kindref="member">onErrorReceived</ref>(<ref refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5a7017f9b2f86ff163d1d6e86cc89b7f63" kindref="member">ERROR_MESSAGE_DESERIALISATION_BAD_BYTES</ref>,</highlight><highlight class="stringliteral">&quot;Attempting<sp/>to<sp/>deserialize<sp/>a<sp/>BlockHeaders<sp/>with<sp/>a<sp/>var<sp/>int<sp/>over<sp/>2000.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Deserialise<sp/>each<sp/>header<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;blockHeaders<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*self-&gt;blockHeaders)<sp/>*<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)numOfHeaders.<ref refid="struct_var_len_int_1a4e630859cc0e2a22bd6acf39a6a8e218" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>self-&gt;blockHeaders)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_message_8c_1a9ab128ae9cafefd9b05e2e0bfa719770" kindref="member" tooltip="getter">getMessage</ref>(</highlight><highlight class="keyword">self</highlight><highlight class="normal">)-&gt;<ref refid="struct_message_1a3c8af4f580f3041d046b7581f89a9695" kindref="member">onErrorReceived</ref>(<ref refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5ac0a554045048d2fb61387cf735676f69" kindref="member">ERROR_OUT_OF_MEMORY</ref>,</highlight><highlight class="stringliteral">&quot;Cannot<sp/>allocate<sp/>%i<sp/>bytes<sp/>of<sp/>memory<sp/>in<sp/>deserializeBlockHeaders\n&quot;</highlight><highlight class="normal">,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*self-&gt;blockHeaders)<sp/>*<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)numOfHeaders.<ref refid="struct_var_len_int_1a4e630859cc0e2a22bd6acf39a6a8e218" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;numOfHeaders<sp/>=<sp/>numOfHeaders.<ref refid="struct_var_len_int_1a4e630859cc0e2a22bd6acf39a6a8e218" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>cursor<sp/>=<sp/>numOfHeaders.<ref refid="struct_var_len_int_1af922c72fe1d5915971491918ff5f923e" kindref="member">storageSize</ref>;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>x;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>numOfHeaders.<ref refid="struct_var_len_int_1a4e630859cc0e2a22bd6acf39a6a8e218" kindref="member">value</ref>;<sp/>x++)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Make<sp/>new<sp/>Block<sp/>from<sp/>the<sp/>rest<sp/>of<sp/>the<sp/>data.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_byte_array" kindref="compound" tooltip="Structure for ByteArray objects.">ByteArray</ref><sp/>*<sp/>data<sp/>=<sp/><ref refid="_byte_array_8c_1aefe112436e17fc5a1c56d263596a612b" kindref="member" tooltip="gets ByteArray Subsection Reference">getByteArraySubsectionReference</ref>(bytes,<sp/>cursor,<sp/>bytes-&gt;<ref refid="struct_byte_array_1aebb70c2aab3407a9f05334c47131a43b" kindref="member">length</ref>-cursor);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>data)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_message_8c_1a9ab128ae9cafefd9b05e2e0bfa719770" kindref="member" tooltip="getter">getMessage</ref>(</highlight><highlight class="keyword">self</highlight><highlight class="normal">)-&gt;<ref refid="struct_message_1a3c8af4f580f3041d046b7581f89a9695" kindref="member">onErrorReceived</ref>(<ref refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5a61583dbb5057f77e6fc74ab42bea43ce" kindref="member">ERROR_INIT_FAIL</ref>,</highlight><highlight class="stringliteral">&quot;Cannot<sp/>create<sp/>a<sp/>new<sp/>ByteArray<sp/>in<sp/>deserializeBlockHeaders<sp/>for<sp/>the<sp/>header<sp/>number<sp/>%u.&quot;</highlight><highlight class="normal">,x);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;blockHeaders[x]<sp/>=<sp/><ref refid="_block_8c_1a522ff05175c1944559e2001a51d8da90" kindref="member" tooltip="Create a new Block from a given ByteArray data.">createNewBlockFromByteArray</ref>(data,<sp/><ref refid="_message_8c_1a9ab128ae9cafefd9b05e2e0bfa719770" kindref="member" tooltip="getter">getMessage</ref>(</highlight><highlight class="keyword">self</highlight><highlight class="normal">)-&gt;onErrorReceived);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>self-&gt;blockHeaders[x]){</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_message_8c_1a9ab128ae9cafefd9b05e2e0bfa719770" kindref="member" tooltip="getter">getMessage</ref>(</highlight><highlight class="keyword">self</highlight><highlight class="normal">)-&gt;<ref refid="struct_message_1a3c8af4f580f3041d046b7581f89a9695" kindref="member">onErrorReceived</ref>(<ref refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5a61583dbb5057f77e6fc74ab42bea43ce" kindref="member">ERROR_INIT_FAIL</ref>,</highlight><highlight class="stringliteral">&quot;Cannot<sp/>create<sp/>a<sp/>new<sp/>Block<sp/>in<sp/>deserializeBlockHeaders<sp/>for<sp/>the<sp/>header<sp/>number<sp/>%u.&quot;</highlight><highlight class="normal">,x);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_object_8c_1a9773962d80072e39e235802b57907208" kindref="member" tooltip="destructor">destroyObject</ref>(data);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Deserialize<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>len<sp/>=<sp/><ref refid="_block_8c_1a9dcdbbf01ad57512119aa46013c7f92e" kindref="member" tooltip="Deserialize the Block.">deserializeBlock</ref>(self-&gt;blockHeaders[x],</highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">/*<sp/>false<sp/>for<sp/>no<sp/>transactions.<sp/>Only<sp/>the<sp/>header.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>len){</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_message_8c_1a9ab128ae9cafefd9b05e2e0bfa719770" kindref="member" tooltip="getter">getMessage</ref>(</highlight><highlight class="keyword">self</highlight><highlight class="normal">)-&gt;<ref refid="struct_message_1a3c8af4f580f3041d046b7581f89a9695" kindref="member">onErrorReceived</ref>(<ref refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5a7017f9b2f86ff163d1d6e86cc89b7f63" kindref="member">ERROR_MESSAGE_DESERIALISATION_BAD_BYTES</ref>,</highlight><highlight class="stringliteral">&quot;BlockHeaders<sp/>cannot<sp/>be<sp/>deserialised<sp/>because<sp/>of<sp/>an<sp/>error<sp/>with<sp/>the<sp/>Block<sp/>number<sp/>%u.&quot;</highlight><highlight class="normal">,x);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_object_8c_1a9773962d80072e39e235802b57907208" kindref="member" tooltip="destructor">destroyObject</ref>(data);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Adjust<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data-&gt;<ref refid="struct_byte_array_1aebb70c2aab3407a9f05334c47131a43b" kindref="member">length</ref><sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_object_8c_1a9773962d80072e39e235802b57907208" kindref="member" tooltip="destructor">destroyObject</ref>(data);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cursor<sp/>+=<sp/>len;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cursor;</highlight></codeline>
<codeline lineno="140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="141" refid="_block_headers_8h_1a06fe7338aa2dc8d104e7f8148674b202" refkind="member"><highlight class="normal">uint32_t<sp/><ref refid="_block_headers_8c_1a06fe7338aa2dc8d104e7f8148674b202" kindref="member" tooltip="Serializes a BlockHeaders to the byte data.">serializeBlockHeaders</ref>(<ref refid="struct_block_headers" kindref="compound" tooltip="Structure for BlockHeaders objects.">BlockHeaders</ref><sp/>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(</highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_byte_array" kindref="compound" tooltip="Structure for ByteArray objects.">ByteArray</ref><sp/>*<sp/>bytes<sp/>=<sp/><ref refid="_message_8c_1a9ab128ae9cafefd9b05e2e0bfa719770" kindref="member" tooltip="getter">getMessage</ref>(</highlight><highlight class="keyword">self</highlight><highlight class="normal">)-&gt;<ref refid="struct_message_1affc357b616afe9b58c190ae4b21caa77" kindref="member">bytes</ref>;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>bytes)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_message_8c_1a9ab128ae9cafefd9b05e2e0bfa719770" kindref="member" tooltip="getter">getMessage</ref>(</highlight><highlight class="keyword">self</highlight><highlight class="normal">)-&gt;<ref refid="struct_message_1a3c8af4f580f3041d046b7581f89a9695" kindref="member">onErrorReceived</ref>(<ref refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5a1574daad1526eb894269b75627d86b1e" kindref="member">ERROR_MESSAGE_SERIALISATION_NULL_BYTES</ref>,</highlight><highlight class="stringliteral">&quot;Attempting<sp/>to<sp/>serialize<sp/>a<sp/>BlockHeaders<sp/>with<sp/>no<sp/>bytes.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytes-&gt;<ref refid="struct_byte_array_1aebb70c2aab3407a9f05334c47131a43b" kindref="member">length</ref><sp/>&lt;<sp/>81<sp/>*<sp/>self-&gt;numOfHeaders)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_message_8c_1a9ab128ae9cafefd9b05e2e0bfa719770" kindref="member" tooltip="getter">getMessage</ref>(</highlight><highlight class="keyword">self</highlight><highlight class="normal">)-&gt;<ref refid="struct_message_1a3c8af4f580f3041d046b7581f89a9695" kindref="member">onErrorReceived</ref>(<ref refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5a7017f9b2f86ff163d1d6e86cc89b7f63" kindref="member">ERROR_MESSAGE_DESERIALISATION_BAD_BYTES</ref>,</highlight><highlight class="stringliteral">&quot;Attempting<sp/>to<sp/>deserialize<sp/>a<sp/>BlockHeaders<sp/>with<sp/>less<sp/>bytes<sp/>than<sp/>minimally<sp/>required.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_var_len_int" kindref="compound" tooltip="Variable length integer specified in Bitcoin protocol.">VarLenInt</ref><sp/>num<sp/>=<sp/><ref refid="_var_len_int_8c_1a784e8aad4e7aead2119ede96096f33a9" kindref="member" tooltip="Returns a variable integer from an unsigned 64 bit integer.">createVarLenIntFromUInt64</ref>(self-&gt;numOfHeaders);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_var_len_int_8c_1a12852f478f7fcd7cacc0b150fa7fe12a" kindref="member" tooltip="Encodes variable size integer into bytes.">encodeVarLenInt</ref>(bytes,<sp/>0,<sp/>num);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>cursor<sp/>=<sp/>num.<ref refid="struct_var_len_int_1af922c72fe1d5915971491918ff5f923e" kindref="member">storageSize</ref>;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>x;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>num.<ref refid="struct_var_len_int_1a4e630859cc0e2a22bd6acf39a6a8e218" kindref="member">value</ref>;<sp/>x++)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_message_8c_1a9ab128ae9cafefd9b05e2e0bfa719770" kindref="member" tooltip="getter">getMessage</ref>(self-&gt;blockHeaders[x])-&gt;<ref refid="struct_message_1affc357b616afe9b58c190ae4b21caa77" kindref="member">bytes</ref><sp/>=<sp/><ref refid="_byte_array_8c_1aefe112436e17fc5a1c56d263596a612b" kindref="member" tooltip="gets ByteArray Subsection Reference">getByteArraySubsectionReference</ref>(bytes,<sp/>cursor,<sp/>bytes-&gt;<ref refid="struct_byte_array_1aebb70c2aab3407a9f05334c47131a43b" kindref="member">length</ref>-cursor);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/><ref refid="_message_8c_1a9ab128ae9cafefd9b05e2e0bfa719770" kindref="member" tooltip="getter">getMessage</ref>(self-&gt;blockHeaders[x])-&gt;<ref refid="struct_message_1affc357b616afe9b58c190ae4b21caa77" kindref="member">bytes</ref>)<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_message_8c_1a9ab128ae9cafefd9b05e2e0bfa719770" kindref="member" tooltip="getter">getMessage</ref>(</highlight><highlight class="keyword">self</highlight><highlight class="normal">)-&gt;<ref refid="struct_message_1a3c8af4f580f3041d046b7581f89a9695" kindref="member">onErrorReceived</ref>(<ref refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5a61583dbb5057f77e6fc74ab42bea43ce" kindref="member">ERROR_INIT_FAIL</ref>,</highlight><highlight class="stringliteral">&quot;Cannot<sp/>create<sp/>a<sp/>new<sp/>ByteArray<sp/>sub<sp/>reference<sp/>in<sp/>serializeBlockHeaders<sp/>for<sp/>the<sp/>header<sp/>number<sp/>%u&quot;</highlight><highlight class="normal">,x);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>len<sp/>=<sp/><ref refid="_block_8c_1ab0d1c25a8612a3644626e5030ffbe456" kindref="member" tooltip="Serializes a Block to the byte data.">serializeBlock</ref>(self-&gt;blockHeaders[x],</highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">/*<sp/>false<sp/>for<sp/>no<sp/>transactions.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!len)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_message_8c_1a9ab128ae9cafefd9b05e2e0bfa719770" kindref="member" tooltip="getter">getMessage</ref>(</highlight><highlight class="keyword">self</highlight><highlight class="normal">)-&gt;<ref refid="struct_message_1a3c8af4f580f3041d046b7581f89a9695" kindref="member">onErrorReceived</ref>(<ref refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5a60284f8679886500015725682ed0a10d" kindref="member">ERROR_MESSAGE_SERIALISATION_BAD_BYTES</ref>,</highlight><highlight class="stringliteral">&quot;BlockHeaders<sp/>cannot<sp/>be<sp/>serialized<sp/>because<sp/>of<sp/>an<sp/>error<sp/>with<sp/>the<sp/>Block<sp/>number<sp/>%u.&quot;</highlight><highlight class="normal">,x);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Release<sp/>ByteArray<sp/>objects<sp/>to<sp/>avoid<sp/>problems<sp/>overwritting<sp/>pointer<sp/>without<sp/>release,<sp/>if<sp/>serialisation<sp/>is<sp/>tried<sp/>again.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>y;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>x<sp/>+<sp/>1;<sp/>y++)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_object_8c_1a9773962d80072e39e235802b57907208" kindref="member" tooltip="destructor">destroyObject</ref>(<ref refid="_message_8c_1a9ab128ae9cafefd9b05e2e0bfa719770" kindref="member" tooltip="getter">getMessage</ref>(self-&gt;blockHeaders[y])-&gt;<ref refid="struct_message_1affc357b616afe9b58c190ae4b21caa77" kindref="member">bytes</ref>);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_message_8c_1a9ab128ae9cafefd9b05e2e0bfa719770" kindref="member" tooltip="getter">getMessage</ref>(self-&gt;blockHeaders[x])-&gt;<ref refid="struct_message_1affc357b616afe9b58c190ae4b21caa77" kindref="member">bytes</ref>-&gt;<ref refid="struct_byte_array_1aebb70c2aab3407a9f05334c47131a43b" kindref="member">length</ref><sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cursor<sp/>+=<sp/>len;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cursor;</highlight></codeline>
<codeline lineno="176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178" refid="_block_headers_8h_1a89997b50a9646d1558b1c215d2de0cdf" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_block_headers_8c_1a89997b50a9646d1558b1c215d2de0cdf" kindref="member" tooltip="Takes a Block for the block header list. This does not retain the Block so you can pass an Block into...">takeBlockFromBlockHeaderList</ref>(<ref refid="struct_block_headers" kindref="compound" tooltip="Structure for BlockHeaders objects.">BlockHeaders</ref><sp/>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<ref refid="struct_block" kindref="compound" tooltip="Base class.">Block</ref><sp/>*<sp/>header){</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(</highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>header<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;numOfHeaders++;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_block" kindref="compound" tooltip="Base class.">Block</ref><sp/>**<sp/>temp<sp/>=<sp/>realloc(self-&gt;blockHeaders,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*self-&gt;blockHeaders)<sp/>*<sp/>self-&gt;numOfHeaders);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!temp)</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;blockHeaders<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;blockHeaders[</highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;numOfHeaders-1]<sp/>=<sp/>header;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_constants_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="187"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/BlockHeaders.c"/>
  </compounddef>
</doxygen>
