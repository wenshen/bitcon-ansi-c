<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.4">
  <compounddef id="_block_headers_8h" kind="file">
    <compoundname>BlockHeaders.h</compoundname>
    <includes refid="_block_8h" local="yes">Block.h</includes>
    <includedby refid="_block_headers_8c" local="yes">src/Object/Message/BlockHeaders.c</includedby>
    <incdepgraph>
      <node id="754">
        <label>Block.h</label>
        <link refid="_block_8h"/>
        <childnode refid="755" relation="include">
        </childnode>
        <childnode refid="767" relation="include">
        </childnode>
        <childnode refid="759" relation="include">
        </childnode>
      </node>
      <node id="758">
        <label>stdint.h</label>
      </node>
      <node id="757">
        <label>stdlib.h</label>
      </node>
      <node id="767">
        <label>../../BigInt/BigInt.h</label>
      </node>
      <node id="759">
        <label>../../Constants.h</label>
      </node>
      <node id="766">
        <label>../../Utils/Cryptography/Crypt.h</label>
      </node>
      <node id="756">
        <label>Message.h</label>
        <link refid="_message_8h"/>
        <childnode refid="757" relation="include">
        </childnode>
        <childnode refid="758" relation="include">
        </childnode>
        <childnode refid="759" relation="include">
        </childnode>
        <childnode refid="760" relation="include">
        </childnode>
        <childnode refid="761" relation="include">
        </childnode>
        <childnode refid="762" relation="include">
        </childnode>
      </node>
      <node id="764">
        <label>../Script.h</label>
      </node>
      <node id="765">
        <label>TransactionOutput.h</label>
        <link refid="_transaction_output_8h"/>
        <childnode refid="756" relation="include">
        </childnode>
        <childnode refid="764" relation="include">
        </childnode>
      </node>
      <node id="763">
        <label>TransactionInput.h</label>
        <link refid="_transaction_input_8h"/>
        <childnode refid="756" relation="include">
        </childnode>
        <childnode refid="764" relation="include">
        </childnode>
        <childnode refid="765" relation="include">
        </childnode>
      </node>
      <node id="760">
        <label>../ByteArray.h</label>
      </node>
      <node id="761">
        <label>../Object.h</label>
      </node>
      <node id="762">
        <label>../../Utils/VariableLengthInteger/VarLenInt.h</label>
      </node>
      <node id="753">
        <label>src/Object/Message/BlockHeaders.h</label>
        <link refid="BlockHeaders.h"/>
        <childnode refid="754" relation="include">
        </childnode>
      </node>
      <node id="755">
        <label>Transaction.h</label>
        <link refid="_transaction_8h"/>
        <childnode refid="756" relation="include">
        </childnode>
        <childnode refid="763" relation="include">
        </childnode>
        <childnode refid="765" relation="include">
        </childnode>
        <childnode refid="766" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="769">
        <label>src/Object/Message/BlockHeaders.c</label>
        <link refid="_block_headers_8c"/>
      </node>
      <node id="768">
        <label>src/Object/Message/BlockHeaders.h</label>
        <link refid="BlockHeaders.h"/>
        <childnode refid="769" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_block_headers" prot="public">BlockHeaders</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="_block_headers_8h_1a51c1cdd585a18d75265a21f37defac7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> *</type>
        <definition>BlockHeaders* newBlockHeaders</definition>
        <argsstring>(void(*onErrorReceived)(Error error, char *,...))</argsstring>
        <name>newBlockHeaders</name>
        <param>
          <type>void(*)(<ref refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5" kindref="member">Error</ref> error, char *,...)</type>
          <declname>onErrorReceived</declname>
        </param>
        <briefdescription>
<para>Creates a new <ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> object. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A new <ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/BlockHeaders.h" line="33" bodyfile="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/BlockHeaders.c" bodystart="14" bodyend="26"/>
        <references refid="struct_object_1aa353725933e843001d4feb03f8268121" compoundref="_object_8h" startline="29">Object::destroy</references>
        <references refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5ac0a554045048d2fb61387cf735676f69" compoundref="_constants_8h" startline="52">ERROR_OUT_OF_MEMORY</references>
        <references refid="_block_headers_8c_1a98630cb979038b4555bdefb6363af1da" compoundref="_block_headers_8c" startline="68" endline="77">freeBlockHeaders</references>
        <references refid="_object_8c_1a8460165be167be3b0816d84f498e3733" compoundref="_object_8c" startline="42" endline="47">getObject</references>
        <references refid="_block_headers_8c_1ad4e2078ad35828125e6849a43dbcb3db" compoundref="_block_headers_8c" startline="49" endline="56">initBlockHeaders</references>
      </memberdef>
      <memberdef kind="function" id="_block_headers_8h_1a410e43950e869b2178f0e904336bdac7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> *</type>
        <definition>BlockHeaders* newBlockHeadersFromData</definition>
        <argsstring>(ByteArray *data, void(*onErrorReceived)(Error error, char *,...))</argsstring>
        <name>newBlockHeadersFromData</name>
        <param>
          <type><ref refid="struct_byte_array" kindref="compound">ByteArray</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>void(*)(<ref refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5" kindref="member">Error</ref> error, char *,...)</type>
          <declname>onErrorReceived</declname>
        </param>
        <briefdescription>
<para>Creates a new <ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> object from serialized data. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Serialized <ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> data. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new <ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/BlockHeaders.h" line="39" bodyfile="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/BlockHeaders.c" bodystart="27" bodyend="39"/>
        <references refid="struct_object_1aa353725933e843001d4feb03f8268121" compoundref="_object_8h" startline="29">Object::destroy</references>
        <references refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5ac0a554045048d2fb61387cf735676f69" compoundref="_constants_8h" startline="52">ERROR_OUT_OF_MEMORY</references>
        <references refid="_block_headers_8c_1a98630cb979038b4555bdefb6363af1da" compoundref="_block_headers_8c" startline="68" endline="77">freeBlockHeaders</references>
        <references refid="_object_8c_1a8460165be167be3b0816d84f498e3733" compoundref="_object_8c" startline="42" endline="47">getObject</references>
        <references refid="_block_headers_8c_1aefd88cac89497c7f5b47af74b707cea6" compoundref="_block_headers_8c" startline="57" endline="64">initBlockHeadersFromData</references>
      </memberdef>
      <memberdef kind="function" id="_block_headers_8h_1a931382309447b730978686d83006dca8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> *</type>
        <definition>BlockHeaders* getBlockHeaders</definition>
        <argsstring>(void *self)</argsstring>
        <name>getBlockHeaders</name>
        <param>
          <type>void *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para>Gets a <ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> from another object. Use this to avoid casts. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to obtain the <ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> from. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The <ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/BlockHeaders.h" line="46" bodyfile="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/BlockHeaders.c" bodystart="43" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="_block_headers_8h_1ad4e2078ad35828125e6849a43dbcb3db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int initBlockHeaders</definition>
        <argsstring>(BlockHeaders *self, void(*onErrorReceived)(Error error, char *,...))</argsstring>
        <name>initBlockHeaders</name>
        <param>
          <type><ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>void(*)(<ref refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5" kindref="member">Error</ref> error, char *,...)</type>
          <declname>onErrorReceived</declname>
        </param>
        <briefdescription>
<para>Initializes a <ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> object to initialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true on success, false on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/BlockHeaders.h" line="53" bodyfile="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/BlockHeaders.c" bodystart="49" bodyend="56"/>
        <references refid="_constants_8h_1aa93f0eb578d23995850d61f7d61c55c1" compoundref="_constants_8h" startline="89">FALSE</references>
        <references refid="_message_8c_1a9ab128ae9cafefd9b05e2e0bfa719770" compoundref="_message_8c" startline="131" endline="135">getMessage</references>
        <references refid="_message_8c_1abeae03d7e39e468bf5958d4d2b1dc61b" compoundref="_message_8c" startline="94" endline="106">initializeMessageFromObject</references>
        <references refid="_constants_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" compoundref="_constants_8h" startline="90">TRUE</references>
        <referencedby refid="_block_headers_8h_1a51c1cdd585a18d75265a21f37defac7a" compoundref="_block_headers_8c" startline="14" endline="26">newBlockHeaders</referencedby>
      </memberdef>
      <memberdef kind="function" id="_block_headers_8h_1aefd88cac89497c7f5b47af74b707cea6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int initBlockHeadersFromData</definition>
        <argsstring>(BlockHeaders *self, ByteArray *data, void(*onErrorReceived)(Error error, char *,...))</argsstring>
        <name>initBlockHeadersFromData</name>
        <param>
          <type><ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type><ref refid="struct_byte_array" kindref="compound">ByteArray</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>void(*)(<ref refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5" kindref="member">Error</ref> error, char *,...)</type>
          <declname>onErrorReceived</declname>
        </param>
        <briefdescription>
<para>Initializes a <ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> object from serialized data. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> object to initialize </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The serialized data. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true on success, false on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/BlockHeaders.h" line="60" bodyfile="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/BlockHeaders.c" bodystart="57" bodyend="64"/>
        <references refid="_constants_8h_1aa93f0eb578d23995850d61f7d61c55c1" compoundref="_constants_8h" startline="89">FALSE</references>
        <references refid="_message_8c_1a9ab128ae9cafefd9b05e2e0bfa719770" compoundref="_message_8c" startline="131" endline="135">getMessage</references>
        <references refid="_message_8c_1a297413f770355bd4bd2212e999867031" compoundref="_message_8c" startline="108" endline="123">initializeMessageFromByteArrayData</references>
        <references refid="_constants_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" compoundref="_constants_8h" startline="90">TRUE</references>
        <referencedby refid="_block_headers_8h_1a410e43950e869b2178f0e904336bdac7" compoundref="_block_headers_8c" startline="27" endline="39">newBlockHeadersFromData</referencedby>
      </memberdef>
      <memberdef kind="function" id="_block_headers_8h_1adb988cdb814bfc8fa966046c04fe04df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void freeBlockHeaders</definition>
        <argsstring>(void *self)</argsstring>
        <name>freeBlockHeaders</name>
        <param>
          <type>void *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para>Frees a <ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> object to free. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/BlockHeaders.h" line="66" bodyfile="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/BlockHeaders.c" bodystart="68" bodyend="77"/>
        <references refid="_message_8c_1ac2c2a78178aac5f9f228b51d01bf5fe3" compoundref="_message_8c" startline="145" endline="154">destroyMessage</references>
        <references refid="_object_8c_1a9773962d80072e39e235802b57907208" compoundref="_object_8c" startline="59" endline="63">destroyObject</references>
        <referencedby refid="_block_headers_8h_1a51c1cdd585a18d75265a21f37defac7a" compoundref="_block_headers_8c" startline="14" endline="26">newBlockHeaders</referencedby>
        <referencedby refid="_block_headers_8h_1a410e43950e869b2178f0e904336bdac7" compoundref="_block_headers_8c" startline="27" endline="39">newBlockHeadersFromData</referencedby>
      </memberdef>
      <memberdef kind="function" id="_block_headers_8h_1a9f0f95e6fb11bea9a15416fa7131515a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int addBlockHeaderToBlockHeaderList</definition>
        <argsstring>(BlockHeaders *self, Block *header)</argsstring>
        <name>addBlockHeaderToBlockHeaderList</name>
        <param>
          <type><ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type><ref refid="struct_block" kindref="compound">Block</ref> *</type>
          <declname>header</declname>
        </param>
        <briefdescription>
<para>Adds a <ref refid="struct_block" kindref="compound">Block</ref> into the block header list. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="struct_block" kindref="compound">Block</ref> to add. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the block header was added successfully or false on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/BlockHeaders.h" line="74" bodyfile="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/BlockHeaders.c" bodystart="80" bodyend="84"/>
        <references refid="_object_8c_1a5f22211b2f99a33c1b4b7ad544ce108a" compoundref="_object_8c" startline="81" endline="92">incrementReferenceCount</references>
        <references refid="_block_headers_8c_1a89997b50a9646d1558b1c215d2de0cdf" compoundref="_block_headers_8c" startline="178" endline="187">takeBlockFromBlockHeaderList</references>
      </memberdef>
      <memberdef kind="function" id="_block_headers_8h_1a0f85776f4a67bf22fb092b54e9afbcf5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t calculateBlockHeadersLength</definition>
        <argsstring>(BlockHeaders *self)</argsstring>
        <name>calculateBlockHeadersLength</name>
        <param>
          <type><ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para>Calculates the length needed to serialize the object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> object. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The length read on success, 0 on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/BlockHeaders.h" line="80" bodyfile="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/BlockHeaders.c" bodystart="85" bodyend="88"/>
        <references refid="_var_len_int_8c_1a9a5568c05dc89004c60b0a1679b38ba6" compoundref="_var_len_int_8c" startline="82" endline="94">getSizeOfVarLenInt</references>
      </memberdef>
      <memberdef kind="function" id="_block_headers_8h_1ace10b6ab479717f0540e5a5528ca3952" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t deserializeBlockHeaders</definition>
        <argsstring>(BlockHeaders *self)</argsstring>
        <name>deserializeBlockHeaders</name>
        <param>
          <type><ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para>Deserializes a <ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> so that it can be used as an object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The length read on success, 0 on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/BlockHeaders.h" line="86" bodyfile="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/BlockHeaders.c" bodystart="89" bodyend="140"/>
        <references refid="struct_message_1affc357b616afe9b58c190ae4b21caa77" compoundref="_message_8h" startline="33">Message::bytes</references>
        <references refid="_block_8c_1a522ff05175c1944559e2001a51d8da90" compoundref="_block_8c" startline="58" endline="77">createNewBlockFromByteArray</references>
        <references refid="_var_len_int_8c_1a4dd8c16aa70756e7ab6c0845a09358af" compoundref="_var_len_int_8c" startline="13" endline="43">decodeVarLenInt</references>
        <references refid="_block_8c_1a9dcdbbf01ad57512119aa46013c7f92e" compoundref="_block_8c" startline="272" endline="312">deserializeBlock</references>
        <references refid="_object_8c_1a9773962d80072e39e235802b57907208" compoundref="_object_8c" startline="59" endline="63">destroyObject</references>
        <references refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5a61583dbb5057f77e6fc74ab42bea43ce" compoundref="_constants_8h" startline="53">ERROR_INIT_FAIL</references>
        <references refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5a7017f9b2f86ff163d1d6e86cc89b7f63" compoundref="_constants_8h" startline="39">ERROR_MESSAGE_DESERIALISATION_BAD_BYTES</references>
        <references refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5a63040cd367f8f87162668c5853b98d26" compoundref="_constants_8h" startline="40">ERROR_MESSAGE_DESERIALISATION_NULL_BYTES</references>
        <references refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5ac0a554045048d2fb61387cf735676f69" compoundref="_constants_8h" startline="52">ERROR_OUT_OF_MEMORY</references>
        <references refid="_byte_array_8c_1aefe112436e17fc5a1c56d263596a612b" compoundref="_byte_array_8c" startline="105" endline="131">getByteArraySubsectionReference</references>
        <references refid="_message_8c_1a9ab128ae9cafefd9b05e2e0bfa719770" compoundref="_message_8c" startline="131" endline="135">getMessage</references>
        <references refid="struct_byte_array_1aebb70c2aab3407a9f05334c47131a43b" compoundref="_byte_array_8h" startline="33">ByteArray::length</references>
        <references refid="struct_message_1a3c8af4f580f3041d046b7581f89a9695" compoundref="_message_8h" startline="35">Message::onErrorReceived</references>
        <references refid="struct_var_len_int_1af922c72fe1d5915971491918ff5f923e" compoundref="_var_len_int_8h" startline="28">VarLenInt::storageSize</references>
        <references refid="struct_var_len_int_1a4e630859cc0e2a22bd6acf39a6a8e218" compoundref="_var_len_int_8h" startline="27">VarLenInt::value</references>
      </memberdef>
      <memberdef kind="function" id="_block_headers_8h_1a06fe7338aa2dc8d104e7f8148674b202" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t serializeBlockHeaders</definition>
        <argsstring>(BlockHeaders *self)</argsstring>
        <name>serializeBlockHeaders</name>
        <param>
          <type><ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para>Serializes a <ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> to the byte data. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The length written on success, 0 on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/BlockHeaders.h" line="92" bodyfile="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/BlockHeaders.c" bodystart="141" bodyend="176"/>
        <references refid="struct_message_1affc357b616afe9b58c190ae4b21caa77" compoundref="_message_8h" startline="33">Message::bytes</references>
        <references refid="_var_len_int_8c_1a784e8aad4e7aead2119ede96096f33a9" compoundref="_var_len_int_8c" startline="71" endline="80">createVarLenIntFromUInt64</references>
        <references refid="_object_8c_1a9773962d80072e39e235802b57907208" compoundref="_object_8c" startline="59" endline="63">destroyObject</references>
        <references refid="_var_len_int_8c_1a12852f478f7fcd7cacc0b150fa7fe12a" compoundref="_var_len_int_8c" startline="45" endline="69">encodeVarLenInt</references>
        <references refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5a61583dbb5057f77e6fc74ab42bea43ce" compoundref="_constants_8h" startline="53">ERROR_INIT_FAIL</references>
        <references refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5a7017f9b2f86ff163d1d6e86cc89b7f63" compoundref="_constants_8h" startline="39">ERROR_MESSAGE_DESERIALISATION_BAD_BYTES</references>
        <references refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5a60284f8679886500015725682ed0a10d" compoundref="_constants_8h" startline="41">ERROR_MESSAGE_SERIALISATION_BAD_BYTES</references>
        <references refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5a1574daad1526eb894269b75627d86b1e" compoundref="_constants_8h" startline="42">ERROR_MESSAGE_SERIALISATION_NULL_BYTES</references>
        <references refid="_byte_array_8c_1aefe112436e17fc5a1c56d263596a612b" compoundref="_byte_array_8c" startline="105" endline="131">getByteArraySubsectionReference</references>
        <references refid="_message_8c_1a9ab128ae9cafefd9b05e2e0bfa719770" compoundref="_message_8c" startline="131" endline="135">getMessage</references>
        <references refid="struct_byte_array_1aebb70c2aab3407a9f05334c47131a43b" compoundref="_byte_array_8h" startline="33">ByteArray::length</references>
        <references refid="struct_message_1a3c8af4f580f3041d046b7581f89a9695" compoundref="_message_8h" startline="35">Message::onErrorReceived</references>
        <references refid="_block_8c_1ab0d1c25a8612a3644626e5030ffbe456" compoundref="_block_8c" startline="444" endline="472">serializeBlock</references>
        <references refid="struct_var_len_int_1af922c72fe1d5915971491918ff5f923e" compoundref="_var_len_int_8h" startline="28">VarLenInt::storageSize</references>
        <references refid="struct_var_len_int_1a4e630859cc0e2a22bd6acf39a6a8e218" compoundref="_var_len_int_8h" startline="27">VarLenInt::value</references>
      </memberdef>
      <memberdef kind="function" id="_block_headers_8h_1a89997b50a9646d1558b1c215d2de0cdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int takeBlockFromBlockHeaderList</definition>
        <argsstring>(BlockHeaders *self, Block *header)</argsstring>
        <name>takeBlockFromBlockHeaderList</name>
        <param>
          <type><ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type><ref refid="struct_block" kindref="compound">Block</ref> *</type>
          <declname>header</declname>
        </param>
        <briefdescription>
<para>Takes a <ref refid="struct_block" kindref="compound">Block</ref> for the block header list. This does not retain the <ref refid="struct_block" kindref="compound">Block</ref> so you can pass an <ref refid="struct_block" kindref="compound">Block</ref> into this while releasing control from the calling function. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="struct_block_headers" kindref="compound">BlockHeaders</ref> object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="struct_block" kindref="compound">Block</ref> to take. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the block header was taken successfully or false on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/BlockHeaders.h" line="99" bodyfile="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/BlockHeaders.c" bodystart="178" bodyend="187"/>
        <references refid="_constants_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" compoundref="_constants_8h" startline="90">TRUE</references>
        <referencedby refid="_block_headers_8h_1a9f0f95e6fb11bea9a15416fa7131515a" compoundref="_block_headers_8c" startline="80" endline="84">addBlockHeaderToBlockHeaderList</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A message used to send and receive block headers. Inherits <ref refid="struct_message" kindref="compound">Message</ref>. </para>    </briefdescription>
    <detaileddescription>
<para>The headers of a block </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>BlockHeaders.h</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Created<sp/>on:<sp/>Nov<sp/>8,<sp/>2012</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Created<sp/>by:<sp/>Wen<sp/>Shen</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2012<sp/>MIBitcoin<sp/>Project<sp/>Team</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="preprocessor">#ifndef<sp/>BLOCKHEADERS_H_</highlight></codeline>
<codeline lineno="15"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>BLOCKHEADERS_H_</highlight></codeline>
<codeline lineno="16"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_block_8h" kindref="compound" tooltip="This file defines a bitcoin block.">Block.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="struct_block_headers" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="24" refid="struct_block_headers_1a8987f797adf70c3e174fd64cc68bc933" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_message" kindref="compound" tooltip="Structure for Message objects.">Message</ref><sp/><ref refid="struct_block_headers_1a8987f797adf70c3e174fd64cc68bc933" kindref="member">base</ref>;<sp/></highlight></codeline>
<codeline lineno="25" refid="struct_block_headers_1a9cfb2de0666e1e88b621171a97ba801e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/><ref refid="struct_block_headers_1a9cfb2de0666e1e88b621171a97ba801e" kindref="member">numOfHeaders</ref>;<sp/></highlight></codeline>
<codeline lineno="26" refid="struct_block_headers_1a33e1983765c280515297ab5b3a4640e0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_block" kindref="compound" tooltip="Base class.">Block</ref><sp/>**<sp/><ref refid="struct_block_headers_1a33e1983765c280515297ab5b3a4640e0" kindref="member">blockHeaders</ref>;<sp/></highlight></codeline>
<codeline lineno="27"><highlight class="normal">}<sp/><ref refid="struct_block_headers" kindref="compound" tooltip="Structure for BlockHeaders objects.">BlockHeaders</ref>;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><ref refid="struct_block_headers" kindref="compound" tooltip="Structure for BlockHeaders objects.">BlockHeaders</ref><sp/>*<sp/><ref refid="_block_headers_8c_1a51c1cdd585a18d75265a21f37defac7a" kindref="member" tooltip="Creates a new BlockHeaders object.">newBlockHeaders</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*onErrorReceived)(<ref refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5" kindref="member">Error</ref><sp/>error,</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,...));</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><ref refid="struct_block_headers" kindref="compound" tooltip="Structure for BlockHeaders objects.">BlockHeaders</ref><sp/>*<sp/><ref refid="_block_headers_8c_1a410e43950e869b2178f0e904336bdac7" kindref="member" tooltip="Creates a new BlockHeaders object from serialized data.">newBlockHeadersFromData</ref>(<ref refid="struct_byte_array" kindref="compound" tooltip="Structure for ByteArray objects.">ByteArray</ref><sp/>*<sp/>data,</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*onErrorReceived)(<ref refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5" kindref="member">Error</ref><sp/>error,</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,...));</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><ref refid="struct_block_headers" kindref="compound" tooltip="Structure for BlockHeaders objects.">BlockHeaders</ref><sp/>*<sp/><ref refid="_block_headers_8c_1a931382309447b730978686d83006dca8" kindref="member" tooltip="Gets a BlockHeaders from another object. Use this to avoid casts.">getBlockHeaders</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_block_headers_8c_1ad4e2078ad35828125e6849a43dbcb3db" kindref="member" tooltip="Initializes a BlockHeaders object.">initBlockHeaders</ref>(<ref refid="struct_block_headers" kindref="compound" tooltip="Structure for BlockHeaders objects.">BlockHeaders</ref><sp/>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*onErrorReceived)(<ref refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5" kindref="member">Error</ref><sp/>error,</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,...));</highlight></codeline>
<codeline lineno="60"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_block_headers_8c_1aefd88cac89497c7f5b47af74b707cea6" kindref="member" tooltip="Initializes a BlockHeaders object from serialized data.">initBlockHeadersFromData</ref>(<ref refid="struct_block_headers" kindref="compound" tooltip="Structure for BlockHeaders objects.">BlockHeaders</ref><sp/>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<ref refid="struct_byte_array" kindref="compound" tooltip="Structure for ByteArray objects.">ByteArray</ref><sp/>*<sp/>data,</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*onErrorReceived)(<ref refid="_constants_8h_1a2c3e4bb40f36b262a5214e2da2bca9c5" kindref="member">Error</ref><sp/>error,</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,...));</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_block_headers_8c_1a98630cb979038b4555bdefb6363af1da" kindref="member" tooltip="Frees a BlockHeaders object.">freeBlockHeaders</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_block_headers_8c_1a9f0f95e6fb11bea9a15416fa7131515a" kindref="member" tooltip="Adds a Block into the block header list.">addBlockHeaderToBlockHeaderList</ref>(<ref refid="struct_block_headers" kindref="compound" tooltip="Structure for BlockHeaders objects.">BlockHeaders</ref><sp/>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<ref refid="struct_block" kindref="compound" tooltip="Base class.">Block</ref><sp/>*<sp/>header);</highlight></codeline>
<codeline lineno="80"><highlight class="normal">uint32_t<sp/><ref refid="_block_headers_8c_1a0f85776f4a67bf22fb092b54e9afbcf5" kindref="member" tooltip="Calculates the length needed to serialize the object.">calculateBlockHeadersLength</ref>(<ref refid="struct_block_headers" kindref="compound" tooltip="Structure for BlockHeaders objects.">BlockHeaders</ref><sp/>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="86"><highlight class="normal">uint32_t<sp/><ref refid="_block_headers_8c_1ace10b6ab479717f0540e5a5528ca3952" kindref="member" tooltip="Deserializes a BlockHeaders so that it can be used as an object.">deserializeBlockHeaders</ref>(<ref refid="struct_block_headers" kindref="compound" tooltip="Structure for BlockHeaders objects.">BlockHeaders</ref><sp/>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="92"><highlight class="normal">uint32_t<sp/><ref refid="_block_headers_8c_1a06fe7338aa2dc8d104e7f8148674b202" kindref="member" tooltip="Serializes a BlockHeaders to the byte data.">serializeBlockHeaders</ref>(<ref refid="struct_block_headers" kindref="compound" tooltip="Structure for BlockHeaders objects.">BlockHeaders</ref><sp/>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="99"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_block_headers_8c_1a89997b50a9646d1558b1c215d2de0cdf" kindref="member" tooltip="Takes a Block for the block header list. This does not retain the Block so you can pass an Block into...">takeBlockFromBlockHeaderList</ref>(<ref refid="struct_block_headers" kindref="compound" tooltip="Structure for BlockHeaders objects.">BlockHeaders</ref><sp/>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<ref refid="struct_block" kindref="compound" tooltip="Base class.">Block</ref><sp/>*<sp/>header);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>BLOCKHEADERS_H_<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/apopoola/workspace/MIBitcoin/trunk/src/Object/Message/BlockHeaders.h"/>
  </compounddef>
</doxygen>
